-- LinkLuaModifier("modifier_huskar_vitality_explosion_custom", "heroes/hero_huskar/vitality_explosion.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier("modifier_huskar_inner_fire_lua_debuff", "heroes/hero_huskar/huskar_inner_fire_lua/huskar_inner_fire_lua", LUA_MODIFIER_MOTION_NONE)

-- LinkLuaModifier( "modifier_huskar_burning_spear_custom", "heroes/hero_huskar/burning_spear_custom.lua", LUA_MODIFIER_MOTION_NONE )
-- LinkLuaModifier( "modifier_huskar_burning_spear_custom_stack", "heroes/hero_huskar/burning_spear_custom.lua", LUA_MODIFIER_MOTION_NONE )
-- LinkLuaModifier( "modifier_generic_orb_effect_lua", "modifiers/modifier_generic_orb_effect_lua", LUA_MODIFIER_MOTION_NONE )

-- local tempTable = require("libraries/tempTable")


huskar_inner_fire_lua = class({})

function huskar_inner_fire_lua:IsPurgable() return false end
function huskar_inner_fire_lua:RemoveOnDeath() return false end
function huskar_inner_fire_lua:IsHidden() return true end
function huskar_inner_fire_lua:IsStackable() return false end



-- modifier_huskar_vitality_explosion_custom = class(huskar_vitality_explosion_custom)

-------------
function huskar_inner_fire_lua:GetAOERadius()
    return self:GetSpecialValueFor("radius")
end

function huskar_inner_fire_lua:GetManaCost(iLevel)
    local caster = self:GetCaster()
    if caster then
        return math.min(65000, caster:GetIntellect())
    end
end

function huskar_inner_fire_lua:OnSpellStart()

    EmitSoundOn("Hero_Huskar.Inner_Fire.Cast", self:GetCaster())
    self:PlayEffects(self:GetCaster())
    local damage = self:GetSpecialValueFor("base_damage")
    if self:GetCaster():FindAbilityByName("npc_dota_hero_huskar_int6") then
        damage = damage + self:GetCaster():GetIntellect()
    end
    local duration = self:GetSpecialValueFor("disarm_duration")
    local enemies = FindUnitsInRadius(self:GetCaster():GetTeamNumber(), self:GetCaster():GetAbsOrigin(), nil, self:GetSpecialValueFor( "radius" ), DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, DOTA_UNIT_TARGET_FLAG_NONE, 0, false)
    local burning_spear = self:GetCaster():FindAbilityByName("huskar_burning_spear_lua")
    for _,enemy in pairs(enemies) do
        enemy:AddNewModifier(self:GetCaster(), self, "modifier_huskar_inner_fire_lua_debuff", {duration = duration})
        if self:GetCaster():FindAbilityByName("npc_dota_hero_huskar_int9") and burning_spear and burning_spear:GetLevel() > 0 then
            local burning_spear_duration = burning_spear:GetSpecialValueFor("duration")
            for i = 0, (1 + self:GetLevel()/2) do
                enemy:AddNewModifier(
                    self:GetCaster(), -- player source
                    burning_spear, -- ability source
                    "modifier_huskar_burning_spear_lua", -- modifier name
                    { duration = burning_spear_duration } -- kv
                )
            end
        end
        ApplyDamage({
            victim = enemy,
            attacker = self:GetCaster(),
            damage = damage,
            damage_type = DAMAGE_TYPE_MAGICAL,
            damage_flags 	= DOTA_DAMAGE_FLAG_NONE,
            ability 		= self
        })
    end
end

function huskar_inner_fire_lua:PlayEffects(target)
    -- Get Resources
    local particle_cast = "particles/units/heroes/hero_huskar/huskar_inner_fire.vpcf"

    -- Create Particle
    local effect_cast = ParticleManager:CreateParticle( particle_cast, PATTACH_POINT_FOLLOW, target )
    ParticleManager:SetParticleControl( effect_cast, 0, target:GetOrigin() )
    ParticleManager:ReleaseParticleIndex( effect_cast )
end
-------------
modifier_huskar_inner_fire_lua_debuff = class({})

function modifier_huskar_inner_fire_lua_debuff:IsPurgable() return false end
function modifier_huskar_inner_fire_lua_debuff:RemoveOnDeath() return false end
function modifier_huskar_inner_fire_lua_debuff:IsHidden() return false end
function modifier_huskar_inner_fire_lua_debuff:IsStackable() return true end
function modifier_huskar_inner_fire_lua_debuff:IsDebuff() return true end

function modifier_huskar_inner_fire_lua_debuff:CheckState()
    local state = {
        [MODIFIER_STATE_DISARMED] = true
    }

    return state
end








-- {
--     __self                          	= userdata: 0x1940a9f0 (userdata)
--     BaseClass                       	= table: 0x189ef948 (table)
--     {
--        metatable = table: 0x18997ef0
--        {
--           IsActivated                     	= function: 0x189993f0 (function)
--           IsRefreshable                   	= function: 0x189994a0 (function)
--           IsCosmetic                      	= function: 0x18a37228 (function)
--           IsSharedWithTeammates           	= function: 0x18999600 (function)
--           SetHidden                       	= function: 0x189996b8 (function)
--           SetActivated                    	= function: 0x18999768 (function)
--           ToggleAutoCast                  	= function: 0x18999818 (function)
--           GetAutoCastState                	= function: 0x189998c8 (function)
--           IsItem                          	= function: 0x18999980 (function)
--           GetChannelTime                  	= function: 0x18999a00 (function)
--           GetChannelStartTime             	= function: 0x18999ab0 (function)
--           EndChannel                      	= function: 0x18998d60 (function)
--           ToggleAbility                   	= function: 0x18998e10 (function)
--           CastAbility                     	= function: 0x18998ec0 (function)
--           GetCastRange                    	= function: 0x18a371f8 (function)
--           GetEffectiveCastRange           	= function: 0x18999068 (function)
--           GetCastPoint                    	= function: 0x18999120 (function)
--           GetCastPointModifier            	= function: 0x189991d0 (function)
--           GetAOERadius                    	= function: 0x18999288 (function)
--           ContinueCasting                 	= function: 0x1899a738 (function)
--           GetAnimationIgnoresModelScale   	= function: 0x1899a7b8 (function)
--           SetOverrideCastPoint            	= function: 0x1899a878 (function)
--           GetModifierValue                	= function: 0x1899a930 (function)
--           GetModifierValueBonus           	= function: 0x1899a9e8 (function)
--           SetRefCountsModifiers           	= function: 0x1899aaa0 (function)
--           RefCountsModifiers              	= function: 0x1899ab58 (function)
--           IncrementModifierRefCount       	= function: 0x1899ac10 (function)
--           DecrementModifierRefCount       	= function: 0x1899acd0 (function)
--           NumModifiersUsingAbility        	= function: 0x1899ad90 (function)
--           IsFullyCastable                 	= function: 0x1899ae50 (function)
--           IsAttributeBonus                	= function: 0x1899af00 (function)
--           ProcsMagicStick                 	= function: 0x1899afb8 (function)
--           StartCooldown                   	= function: 0x1899b068 (function)
--           EndCooldown                     	= function: 0x1899b118 (function)
--           GetCooldown                     	= function: 0x1899b1c8 (function)
--           GetEffectiveCooldown            	= function: 0x1899b278 (function)
--           IsCooldownReady                 	= function: 0x1899b330 (function)
--           GetSharedCooldownName           	= function: 0x1899b3e0 (function)
--           GetCooldownTime                 	= function: 0x1899b498 (function)
--           GetCooldownTimeRemaining        	= function: 0x1899b548 (function)
--           SetFrozenCooldown               	= function: 0x1899b608 (function)
--           ShouldUseResources              	= function: 0x1899b6c0 (function)
--           UseResources                    	= function: 0x1899b778 (function)
--           FDesc                           	= table: 0x18997fa8 (table)
--           {
--              IsActivated                     	= bool IsActivated()
--   (userdata)
--              IsRefreshable                   	= bool IsRefreshable()
--   (userdata)
--              IsCosmetic                      	= bool IsCosmetic(handle hEntity)
--   (userdata)
--              IsSharedWithTeammates           	= bool IsSharedWithTeammates()
--   (userdata)
--              SetHidden                       	= void SetHidden(bool bHidden)
--   (userdata)
--              SetActivated                    	= void SetActivated(bool bActivated)
--   (userdata)
--              ToggleAutoCast                  	= void ToggleAutoCast()
--   (userdata)
--              GetAutoCastState                	= bool GetAutoCastState()
--   (userdata)
--              IsItem                          	= bool IsItem()
--   (userdata)
--              GetChannelTime                  	= float GetChannelTime()
--   (userdata)
--              GetChannelStartTime             	= float GetChannelStartTime()
--   (userdata)
--              EndChannel                      	= void EndChannel(bool bInterrupted)
--   (userdata)
--              ToggleAbility                   	= void ToggleAbility()
--   (userdata)
--              CastAbility                     	= bool CastAbility()
--   (userdata)
--              GetCastRange                    	= int GetCastRange(Vector vLocation, handle hTarget)
--  Gets the cast range of the ability. (userdata)
--              GetEffectiveCastRange           	= int GetEffectiveCastRange(Vector vLocation, handle hTarget)
--  Gets the cast range of the ability, taking modifiers into account. (userdata)
--              GetCastPoint                    	= float GetCastPoint()
--   (userdata)
--              GetCastPointModifier            	= float GetCastPointModifier()
--   (userdata)
--              GetAOERadius                    	= int GetAOERadius()
--   (userdata)
--              ContinueCasting                 	= bool ContinueCasting()
--   (userdata)
--              GetAnimationIgnoresModelScale   	= bool GetAnimationIgnoresModelScale()
--   (userdata)
--              SetOverrideCastPoint            	= void SetOverrideCastPoint(float flCastPoint)
--   (userdata)
--              GetModifierValue                	= float GetModifierValue()
--   (userdata)
--              GetModifierValueBonus           	= float GetModifierValueBonus()
--   (userdata)
--              SetRefCountsModifiers           	= void SetRefCountsModifiers(bool bRefCounts)
--   (userdata)
--              RefCountsModifiers              	= bool RefCountsModifiers()
--   (userdata)
--              IncrementModifierRefCount       	= void IncrementModifierRefCount()
--   (userdata)
--              DecrementModifierRefCount       	= void DecrementModifierRefCount()
--   (userdata)
--              NumModifiersUsingAbility        	= int NumModifiersUsingAbility()
--   (userdata)
--              IsFullyCastable                 	= bool IsFullyCastable()
--  Returns whether the ability can be cast. (userdata)
--              IsAttributeBonus                	= bool IsAttributeBonus()
--   (userdata)
--              ProcsMagicStick                 	= bool ProcsMagicStick()
--   (userdata)
--              StartCooldown                   	= void StartCooldown(float flCooldown)
--   (userdata)
--              EndCooldown                     	= void EndCooldown()
--  Clear the cooldown remaining on this ability. (userdata)
--              GetCooldown                     	= float GetCooldown(int iLevel)
--  Get the cooldown duration for this ability at a given level, not the amount of cooldown actually left. (userdata)
--              GetEffectiveCooldown            	= float GetEffectiveCooldown(int iLevel)
--   (userdata)
--              IsCooldownReady                 	= bool IsCooldownReady()
--   (userdata)
--              GetSharedCooldownName           	= string GetSharedCooldownName()
--   (userdata)
--              GetCooldownTime                 	= float GetCooldownTime()
--   (userdata)
--              GetCooldownTimeRemaining        	= float GetCooldownTimeRemaining()
--   (userdata)
--              SetFrozenCooldown               	= void SetFrozenCooldown(bool bFrozenCooldown)
--   (userdata)
--              ShouldUseResources              	= bool ShouldUseResources()
--   (userdata)
--              UseResources                    	= void UseResources(bool bMana, bool bUseHealth, bool bGold, bool bCooldown)
--   (userdata)
--              PayManaCost                     	= void PayManaCost()
--   (userdata)
--              RefundManaCost                  	= void RefundManaCost()
--   (userdata)
--              IsOwnersManaEnough              	= bool IsOwnersManaEnough()
--   (userdata)
--              PayHealthCost                   	= void PayHealthCost()
--   (userdata)
--              RefundHealthCost                	= void RefundHealthCost()
--   (userdata)
--              PayGoldCost                     	= void PayGoldCost()
--   (userdata)
--              IsOwnersGoldEnough              	= bool IsOwnersGoldEnough(int nIssuerPlayerID)
--   (userdata)
--              PayGoldCostForUpgrade           	= void PayGoldCostForUpgrade()
--   (userdata)
--              IsOwnersGoldEnoughForUpgrade    	= bool IsOwnersGoldEnoughForUpgrade()
--   (userdata)
--              GetAbilityDamage                	= int GetAbilityDamage()
--   (userdata)
--              GetCloneSource                  	= handle GetCloneSource()
--   (userdata)
--              CreateVisibilityNode            	= void CreateVisibilityNode(Vector vLocation, float fRadius, float fDuration)
--   (userdata)
--              GetToggleState                  	= bool GetToggleState()
--   (userdata)
--              GetBehavior                     	= double GetBehavior()
--   (userdata)
--              GetBehaviorInt                  	= int GetBehaviorInt()
--  Get ability behavior flags as an int for compatability. (userdata)
--              GetAbilityTargetTeam            	= int GetAbilityTargetTeam()
--   (userdata)
--              GetAbilityTargetType            	= int GetAbilityTargetType()
--   (userdata)
--              GetAbilityTargetFlags           	= int GetAbilityTargetFlags()
--   (userdata)
--              GetAbilityDamageType            	= int GetAbilityDamageType()
--   (userdata)
--              GetMaxLevel                     	= int GetMaxLevel()
--   (userdata)
--              RefreshIntrinsicModifier        	= void RefreshIntrinsicModifier()
--   (userdata)
--              OnAbilityPhaseStart             	= bool OnAbilityPhaseStart()
--   (userdata)
--              OnAbilityPhaseInterrupted       	= void OnAbilityPhaseInterrupted()
--   (userdata)
--              OnSpellStart                    	= void OnSpellStart()
--   (userdata)
--              OnChannelFinish                 	= void OnChannelFinish(bool bInterrupted)
--   (userdata)
--              OnUpgrade                       	= void OnUpgrade()
--   (userdata)
--              OnOwnerSpawned                  	= void OnOwnerSpawned()
--   (userdata)
--              OnToggle                        	= void OnToggle()
--   (userdata)
--              OnOwnerDied                     	= void OnOwnerDied()
--   (userdata)
--              GetBackswingTime                	= float GetBackswingTime()
--   (userdata)
--              GetManaCost                     	= int GetManaCost(int iLevel)
--   (userdata)
--              GetEffectiveManaCost            	= int GetEffectiveManaCost(int iLevel)
--   (userdata)
--              GetChannelledManaCostPerSecond  	= int GetChannelledManaCostPerSecond(int iLevel)
--   (userdata)
--              GetHealthCost                   	= int GetHealthCost(int iLevel)
--   (userdata)
--              GetEffectiveHealthCost          	= int GetEffectiveHealthCost(int iLevel)
--   (userdata)
--              GetChannelledHealthCostPerSecond	= int GetChannelledHealthCostPerSecond(int iLevel)
--   (userdata)
--              GetGoldCost                     	= int GetGoldCost(int iLevel)
--   (userdata)
--              GetGoldCostForUpgrade           	= int GetGoldCostForUpgrade(int iLevel)
--   (userdata)
--              GetIntrinsicModifierName        	= string GetIntrinsicModifierName()
--   (userdata)
--              ResetToggleOnRespawn            	= bool ResetToggleOnRespawn()
--   (userdata)
--              OnHeroLevelUp                   	= void OnHeroLevelUp()
--   (userdata)
--              OnHeroCalculateStatBonus        	= void OnHeroCalculateStatBonus()
--   (userdata)
--              HeroXPChange                    	= bool HeroXPChange(float flXP)
--   (userdata)
--              OnChannelThink                  	= void OnChannelThink(float flInterval)
--   (userdata)
--              MarkAbilityButtonDirty          	= void MarkAbilityButtonDirty()
--  Mark the ability button for this ability as needing a refresh. (userdata)
--              SpeakAbilityConcept             	= void SpeakAbilityConcept(int iConcept)
--   (userdata)
--              GetConceptRecipientType         	= int GetConceptRecipientType()
--   (userdata)
--              SpeakTrigger                    	= <unknown> SpeakTrigger()
--   (userdata)
--              SetInAbilityPhase               	= void SetInAbilityPhase(bool bInAbilityPhase)
--   (userdata)
--              IsInAbilityPhase                	= bool IsInAbilityPhase()
--  Returns whether the ability is currently casting. (userdata)
--              SetChanneling                   	= void SetChanneling(bool bChanneling)
--   (userdata)
--              IsChanneling                    	= bool IsChanneling()
--  Returns whether the ability is currently channeling. (userdata)
--              RequiresFacing                  	= bool RequiresFacing()
--   (userdata)
--              GetAssociatedPrimaryAbilities   	= string GetAssociatedPrimaryAbilities()
--   (userdata)
--              GetAssociatedSecondaryAbilities 	= string GetAssociatedSecondaryAbilities()
--   (userdata)
--              SetStealable                    	= void SetStealable(bool bStealable)
--   (userdata)
--              IsStealable                     	= bool IsStealable()
--   (userdata)
--              IsHiddenWhenStolen              	= bool IsHiddenWhenStolen()
--   (userdata)
--              IsHiddenAsSecondaryAbility      	= bool IsHiddenAsSecondaryAbility()
--   (userdata)
--              SetStolen                       	= void SetStolen(bool bStolen)
--   (userdata)
--              IsStolen                        	= bool IsStolen()
--   (userdata)
--              PlaysDefaultAnimWhenStolen      	= bool PlaysDefaultAnimWhenStolen()
--   (userdata)
--              GetStolenActivityModifier       	= string GetStolenActivityModifier()
--   (userdata)
--              RefreshCharges                  	= void RefreshCharges()
--   (userdata)
--              SetCurrentAbilityCharges        	= void SetCurrentAbilityCharges(int nCharges)
--   (userdata)
--              EnableAbilityChargesOnTalentUpgrade	= void EnableAbilityChargesOnTalentUpgrade(handle hAbility, string pszTalentName)
--   (userdata)
--              GetInitialAbilityCharges        	= int GetInitialAbilityCharges(int iLevel)
--   (userdata)
--              GetMaxAbilityCharges            	= int GetMaxAbilityCharges(int iLevel)
--   (userdata)
--              GetAbilityChargeRestoreTime     	= float GetAbilityChargeRestoreTime(int iLevel)
--   (userdata)
--              GetCurrentAbilityCharges        	= int GetCurrentAbilityCharges()
--   (userdata)
--              SetUpgradeRecommended           	= void SetUpgradeRecommended(bool bUpgradeRecommended)
--   (userdata)
--              GetUpgradeRecommended           	= bool GetUpgradeRecommended()
--   (userdata)
--              GetLevelSpecialValueFor         	= table GetLevelSpecialValueFor(string szName, int nLevel)
--   (userdata)
--              GetLevelSpecialValueNoOverride  	= table GetLevelSpecialValueNoOverride(string szName, int nLevel)
--   (userdata)
--              GetSpecialValueFor              	= table GetSpecialValueFor(string szName)
--  Gets a value from this ability's special value block for its current level. (userdata)
--              GetDuration                     	= float GetDuration()
--   (userdata)
--              GetCaster                       	= handle GetCaster()
--   (userdata)
--              GetAbilityKeyValues             	= table GetAbilityKeyValues()
--  Gets the key values definition for this ability. (userdata)
--              IsHidden                        	= bool IsHidden()
--   (userdata)
--              GetCursorTarget                 	= handle GetCursorTarget()
--   (userdata)
--              GetCursorPosition               	= Vector GetCursorPosition()
--   (userdata)
--              GetCursorTargetingNothing       	= bool GetCursorTargetingNothing()
--   (userdata)
--              GetLevel                        	= int GetLevel()
--  Get the current level of the ability. (userdata)
--              SetLevel                        	= void SetLevel(int iLevel)
--  Sets the level of this ability. (userdata)
--              IsTrained                       	= bool IsTrained()
--   (userdata)
--              GetPlaybackRateOverride         	= float GetPlaybackRateOverride()
--   (userdata)
--              GetAbilityName                  	= string GetAbilityName()
--  Returns the name of this ability. (userdata)
--              SetAbilityIndex                 	= void SetAbilityIndex(int iIndex)
--   (userdata)
--              GetAbilityIndex                 	= int GetAbilityIndex()
--   (userdata)
--              GetAbilityType                  	= int GetAbilityType()
--   (userdata)
--              UpgradeAbility                  	= void UpgradeAbility(bool bSupressSpeech)
--   (userdata)
--              OnAbilityPinged                 	= void OnAbilityPinged(int nPlayerID, bool bCtrlHeld)
--   (userdata)
--              CanAbilityBeUpgraded            	= <unknown> CanAbilityBeUpgraded()
--   (userdata)
--              GetHeroLevelRequiredToUpgrade   	= int GetHeroLevelRequiredToUpgrade()
--   (userdata)
--              IsPassive                       	= bool IsPassive()
--   (userdata)
--              IsToggle                        	= bool IsToggle()
--   (userdata)
--           }
--           RefundManaCost                  	= function: 0x18999c18 (function)
--           IsOwnersManaEnough              	= function: 0x18999cc8 (function)
--           PayHealthCost                   	= function: 0x18999d80 (function)
--           RefundHealthCost                	= function: 0x18999e30 (function)
--           PayGoldCost                     	= function: 0x18999ee8 (function)
--           IsOwnersGoldEnough              	= function: 0x18999f98 (function)
--           PayGoldCostForUpgrade           	= function: 0x1899a050 (function)
--           IsOwnersGoldEnoughForUpgrade    	= function: 0x1899a108 (function)
--           GetAbilityDamage                	= function: 0x1899a1c8 (function)
--           GetCloneSource                  	= function: 0x1899a300 (function)
--           CreateVisibilityNode            	= function: 0x1899a3b0 (function)
--           GetToggleState                  	= function: 0x1899a468 (function)
--           GetBehavior                     	= function: 0x1899a518 (function)
--           GetBehaviorInt                  	= function: 0x1899a5c8 (function)
--           GetAbilityTargetTeam            	= function: 0x1899a678 (function)
--           GetAbilityTargetType            	= function: 0x1899cff8 (function)
--           GetAbilityTargetFlags           	= function: 0x1899d0b0 (function)
--           GetAbilityDamageType            	= function: 0x1899d168 (function)
--           GetMaxLevel                     	= function: 0x1899d220 (function)
--           RefreshIntrinsicModifier        	= function: 0x1899d2d0 (function)
--           OnAbilityPhaseStart             	= function: 0x1899d390 (function)
--           OnAbilityPhaseInterrupted       	= function: 0x1899d448 (function)
--           OnSpellStart                    	= function: 0x1899d508 (function)
--           OnChannelFinish                 	= function: 0x1899d5b8 (function)
--           OnUpgrade                       	= function: 0x1899d668 (function)
--           OnOwnerSpawned                  	= function: 0x1899d718 (function)
--           OnToggle                        	= function: 0x1899d7c8 (function)
--           OnOwnerDied                     	= function: 0x1899d878 (function)
--           GetBackswingTime                	= function: 0x1899d928 (function)
--           GetManaCost                     	= function: 0x1899d9e0 (function)
--           GetEffectiveManaCost            	= function: 0x1899da90 (function)
--           GetChannelledManaCostPerSecond  	= function: 0x1899db48 (function)
--           GetHealthCost                   	= function: 0x1899dc08 (function)
--           GetEffectiveHealthCost          	= function: 0x1899dcb8 (function)
--           GetChannelledHealthCostPerSecond	= function: 0x1899dd70 (function)
--           GetGoldCost                     	= function: 0x1899de38 (function)
--           GetGoldCostForUpgrade           	= function: 0x1899dee8 (function)
--           GetIntrinsicModifierName        	= function: 0x1899dfa0 (function)
--           ResetToggleOnRespawn            	= function: 0x1899e060 (function)
--           OnHeroLevelUp                   	= function: 0x1899e118 (function)
--           OnHeroCalculateStatBonus        	= function: 0x1899e1c8 (function)
--           HeroXPChange                    	= function: 0x1899e288 (function)
--           OnChannelThink                  	= function: 0x1899e338 (function)
--           MarkAbilityButtonDirty          	= function: 0x1899e3e8 (function)
--           IsNull                          	= function: 0x18997f38 (function)
--           GetConceptRecipientType         	= function: 0x1899e558 (function)
--           SpeakTrigger                    	= function: 0x1899e610 (function)
--           SetInAbilityPhase               	= function: 0x1899e6c0 (function)
--           IsInAbilityPhase                	= function: 0x1899e778 (function)
--           SetChanneling                   	= function: 0x1899e830 (function)
--           IsChanneling                    	= function: 0x1899e8e0 (function)
--           RequiresFacing                  	= function: 0x1899e990 (function)
--           GetAssociatedPrimaryAbilities   	= function: 0x1899ea40 (function)
--           GetAssociatedSecondaryAbilities 	= function: 0x1899eb00 (function)
--           SetStealable                    	= function: 0x1899ebc0 (function)
--           IsStealable                     	= function: 0x1899ec70 (function)
--           IsHiddenWhenStolen              	= function: 0x1899ed20 (function)
--           IsHiddenAsSecondaryAbility      	= function: 0x1899edd8 (function)
--           SetStolen                       	= function: 0x1899ee98 (function)
--           IsStolen                        	= function: 0x1899ef48 (function)
--           PlaysDefaultAnimWhenStolen      	= function: 0x1899eff8 (function)
--           GetStolenActivityModifier       	= function: 0x1899f0b8 (function)
--           RefreshCharges                  	= function: 0x1899b828 (function)
--           SetCurrentAbilityCharges        	= function: 0x1899b8d8 (function)
--           EnableAbilityChargesOnTalentUpgrade	= function: 0x1899b998 (function)
--           GetInitialAbilityCharges        	= function: 0x1899ba60 (function)
--           GetMaxAbilityCharges            	= function: 0x1899bb20 (function)
--           GetAbilityChargeRestoreTime     	= function: 0x1899bbd8 (function)
--           GetCurrentAbilityCharges        	= function: 0x1899bc98 (function)
--           SetUpgradeRecommended           	= function: 0x1899bd58 (function)
--           GetUpgradeRecommended           	= function: 0x1899be10 (function)
--           GetLevelSpecialValueFor         	= function: 0x1899bec8 (function)
--           GetLevelSpecialValueNoOverride  	= function: 0x1899bf80 (function)
--           GetSpecialValueFor              	= function: 0x1899c040 (function)
--           GetCastRange_Engine             	= function: 0x18998f70 (function)
--           IsCosmetic_Engine               	= function: 0x18999550 (function)
--           GetDuration                     	= function: 0x1899a280 (function)
--           CheckVectorTargetPosition       	= function: 0x18af1020 (function)
--           GetVectorTargetPosition         	= function: 0x18af10e8 (function)
--           GetCaster                       	= function: 0x18998110 (function)
--           SpeakAbilityConcept             	= function: 0x1899e4a0 (function)
--           PayManaCost                     	= function: 0x18999b68 (function)
--           GetAbilityKeyValues             	= function: 0x18997ff0 (function)
--           IsHidden                        	= function: 0x18999370 (function)
--           GetCursorTarget                 	= function: 0x18998190 (function)
--           GetCursorPosition               	= function: 0x18998300 (function)
--           GetCursorTargetingNothing       	= function: 0x18998380 (function)
--           GetLevel                        	= function: 0x18998298 (function)
--           SetLevel                        	= function: 0x18998578 (function)
--           IsTrained                       	= function: 0x18998210 (function)
--           GetPlaybackRateOverride         	= function: 0x189987b0 (function)
--           GetAbilityName                  	= function: 0x18998440 (function)
--           SetAbilityIndex                 	= function: 0x189989f0 (function)
--           GetAbilityIndex                 	= function: 0x18998aa0 (function)
--           GetAbilityType                  	= function: 0x18998b50 (function)
--           UpgradeAbility                  	= function: 0x18998c00 (function)
--           OnAbilityPinged                 	= function: 0x18998cb0 (function)
--           CanAbilityBeUpgraded            	= function: 0x18998628 (function)
--           GetHeroLevelRequiredToUpgrade   	= function: 0x189986e0 (function)
--           IsPassive                       	= function: 0x18998868 (function)
--           IsToggle                        	= function: 0x18998918 (function)
--           SetOrigin                       	= function: 0x189403b8 (function)
--           SetLocalAngles                  	= function: 0x18940468 (function)
--           GetLocalAngles                  	= function: 0x18940518 (function)
--           SetLocalOrigin                  	= function: 0x189405c8 (function)
--           GetLocalOrigin                  	= function: 0x18940678 (function)
--           TransformPointEntityToWorld     	= function: 0x18940728 (function)
--           TransformPointWorldToEntity     	= function: 0x189407e8 (function)
--           SetForwardVector                	= function: 0x189408a8 (function)
--           GetBoundingMins                 	= function: 0x18940960 (function)
--           GetBoundingMaxs                 	= function: 0x18940a10 (function)
--           GetBounds                       	= function: 0x18940ac0 (function)
--           GetAngularVelocity              	= function: 0x18940b70 (function)
--           SetAngularVelocity              	= function: 0x1893fda8 (function)
--           AddEffects                      	= function: 0x1893fe60 (function)
--           RemoveEffects                   	= function: 0x1893ff10 (function)
--           Attribute_SetFloatValue         	= function: 0x1893ffc0 (function)
--           Attribute_GetFloatValue         	= function: 0x189400f0 (function)
--           Attribute_SetIntValue           	= function: 0x18940170 (function)
--           Attribute_GetIntValue           	= function: 0x18940228 (function)
--           HasAttribute                    	= function: 0x189402e0 (function)
--           DeleteAttribute                 	= function: 0x189417f8 (function)
--           ValidatePrivateScriptScope      	= function: 0x189418a8 (function)
--           GetOwner                        	= function: 0x18941968 (function)
--           SetOwner                        	= function: 0x18941a18 (function)
--           SetEntityName                   	= function: 0x18941ac8 (function)
--           GetMass                         	= function: 0x18941b78 (function)
--           SetMass                         	= function: 0x18941bf8 (function)
--           GetSpawnGroupHandle             	= function: 0x18941c78 (function)
--           GetAbsOrigin                    	= function: 0x18941d30 (function)
--           GetAngles                       	= function: 0x18941de0 (function)
--           GetAbsScale                     	= function: 0x18941e90 (function)
--           SetAbsScale                     	= function: 0x18941f40 (function)
--           GetLocalScale                   	= function: 0x18941ff0 (function)
--           SetLocalScale                   	= function: 0x189420a0 (function)
--           SetAbsOrigin                    	= function: 0x18942150 (function)
--           GetCenter                       	= function: 0x18942200 (function)
--           GetTeamNumber                   	= function: 0x189422b0 (function)
--           GetTeam                         	= function: 0x18942360 (function)
--           SetTeam                         	= function: 0x189423e0 (function)
--           FollowEntity                    	= function: 0x18942460 (function)
--           FollowEntityMerge               	= function: 0x18942510 (function)
--           Trigger                         	= function: 0x189425c8 (function)
--           SetContextThink                 	= function: 0x18942670 (function)
--           FDesc                           	= table: 0x1893efd8 (table)
--           {
--              SetOrigin                       	= void SetOrigin(Vector v)
--   (userdata)
--              SetLocalAngles                  	= void SetLocalAngles(float fPitch, float fYaw, float fRoll)
--  Set entity local pitch, yaw, roll by component (userdata)
--              GetLocalAngles                  	= QAngle GetLocalAngles()
--  Get entity local pitch, yaw, roll as a QAngle (userdata)
--              SetLocalOrigin                  	= void SetLocalOrigin(Vector origin)
--  Set entity local origin from a Vector (userdata)
--              GetLocalOrigin                  	= Vector GetLocalOrigin()
--  Get entity local origin as a Vector (userdata)
--              TransformPointEntityToWorld     	= Vector TransformPointEntityToWorld(Vector vPoint)
--  Returns the input Vector transformed from entity to world space (userdata)
--              TransformPointWorldToEntity     	= Vector TransformPointWorldToEntity(Vector vPoint)
--  Returns the input Vector transformed from world to entity space (userdata)
--              SetForwardVector                	= void SetForwardVector(Vector v)
--  Set the orientation of the entity to have this forward vector. (userdata)
--              GetBoundingMins                 	= Vector GetBoundingMins()
--  Get a vector containing min bounds, centered on object. (userdata)
--              GetBoundingMaxs                 	= Vector GetBoundingMaxs()
--  Get a vector containing max bounds, centered on object. (userdata)
--              GetBounds                       	= table GetBounds()
--  Get a table containing the 'Mins' & 'Maxs' vector bounds, centered on object. (userdata)
--              GetAngularVelocity              	= Vector GetAngularVelocity()
--  Get the local angular velocity - returns a vector of pitch,yaw,roll (userdata)
--              SetAngularVelocity              	= void SetAngularVelocity(float pitchVel, float yawVel, float rollVel)
--  Set the local angular velocity - takes float pitch,yaw,roll velocities (userdata)
--              AddEffects                      	= void AddEffects(int nFlags)
--  AddEffects( int ): Adds the render effect flag. (userdata)
--              RemoveEffects                   	= void RemoveEffects(int nFlags)
--  RemoveEffects( int ): Removes the render effect flag. (userdata)
--              Attribute_SetFloatValue         	= void Attribute_SetFloatValue(string pName, float flValue)
--  Set float value for an entity attribute. (userdata)
--              Attribute_GetFloatValue         	= float Attribute_GetFloatValue(string pName, float flDefault)
--  Get float value for an entity attribute. (userdata)
--              Attribute_SetIntValue           	= void Attribute_SetIntValue(string pName, int nValue)
--  Set int value for an entity attribute. (userdata)
--              Attribute_GetIntValue           	= int Attribute_GetIntValue(string pName, int nDefault)
--  Get int value for an entity attribute. (userdata)
--              HasAttribute                    	= bool HasAttribute(string pName)
--  See if an entity has a particular attribute. (userdata)
--              DeleteAttribute                 	= void DeleteAttribute(string pName)
--  Delete an entity attribute. (userdata)
--              ValidatePrivateScriptScope      	= void ValidatePrivateScriptScope()
--  Validates the private script scope and creates it if one doesn't exist. (userdata)
--              GetOwner                        	= handle GetOwner()
--  Gets this entity's owner (userdata)
--              SetOwner                        	= void SetOwner(handle pOwner)
--  Sets this entity's owner (userdata)
--              SetEntityName                   	= void SetEntityName(string pName)
--  Set the name of an entity. (userdata)
--              GetMass                         	= float GetMass()
--  Get the mass of an entity. (returns 0 if it doesn't have a physics object) (userdata)
--              SetMass                         	= void SetMass(float flMass)
--  Set the mass of an entity. (does nothing if it doesn't have a physics object) (userdata)
--              GetSpawnGroupHandle             	= int GetSpawnGroupHandle()
--  Returns the spawn group handle of this entity (userdata)
--              GetAbsOrigin                    	= Vector GetAbsOrigin()
--   (userdata)
--              GetAngles                       	= QAngle GetAngles()
--   (userdata)
--              GetAbsScale                     	= float GetAbsScale()
--   (userdata)
--              SetAbsScale                     	= void SetAbsScale(float flScale)
--   (userdata)
--              GetLocalScale                   	= float GetLocalScale()
--   (userdata)
--              SetLocalScale                   	= void SetLocalScale(float flScale)
--   (userdata)
--              SetAbsOrigin                    	= void SetAbsOrigin(Vector origin)
--   (userdata)
--              GetCenter                       	= Vector GetCenter()
--  Get vector to center of object - absolute coords (userdata)
--              GetTeamNumber                   	= int GetTeamNumber()
--  Get the team number of this entity. (userdata)
--              GetTeam                         	= int GetTeam()
--  Get the team number of this entity. (userdata)
--              SetTeam                         	= void SetTeam(int iTeamNum)
--   (userdata)
--              FollowEntity                    	= void FollowEntity(handle hEnt, bool bBoneMerge)
--  hEntity to follow, bool bBoneMerge (userdata)
--              FollowEntityMerge               	= void FollowEntityMerge(handle hEnt, string pszBoneOrAttachName)
--  hEntity to follow, string BoneOrAttachName (userdata)
--              Trigger                         	= void Trigger()
--  Fires off this entity's OnTrigger responses. (userdata)
--              SetContextThink                 	= void SetContextThink(string pszContextName, handle hThinkFunc, float flInterval)
--  Set a think function on this entity. (userdata)
--              SetContext                      	= void SetContext(string pName, string pValue, float duration)
--  SetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a string. Will last for duration (set 0 to mean 'forever'). (userdata)
--              SetContextNum                   	= void SetContextNum(string pName, float fValue, float duration)
--  SetContextNum( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a number (int or float). Will last for duration (set 0 to mean 'forever'). (userdata)
--              GetContext                      	= table GetContext(string name)
--  GetContext( name ): looks up a context and returns it if available. May return string, float, or null (if the context isn't found). (userdata)
--              GatherCriteria                  	= void GatherCriteria(handle hResult)
--  Returns a table containing the criteria that would be used for response queries on this entity. This is the same as the table that is passed to response rule script function callbacks. (userdata)
--              TakeDamage                      	= int TakeDamage(handle hInfo)
--  Apply damage to this entity. Use CreateDamageInfo() to create a damageinfo object. (userdata)
--              IsAlive                         	= bool IsAlive()
--  Is this entity alive? (userdata)
--              IsPlayerPawn                    	= bool IsPlayerPawn()
--  Is this entity a player pawn? (userdata)
--              IsPlayerController              	= bool IsPlayerController()
--  Is this entity a player controller? (userdata)
--              IsNPC                           	= bool IsNPC()
--  Is this entity an CAI_BaseNPC? (userdata)
--              IsDOTANPC                       	= bool IsDOTANPC()
--  Is this entity a Dota NPC? (userdata)
--              GetMaxHealth                    	= int GetMaxHealth()
--  Get the maximum health of this entity. (userdata)
--              SetMaxHealth                    	= void SetMaxHealth(int amt)
--  Set the maximum health of this entity. (userdata)
--              GetOrigin                       	= Vector GetOrigin()
--   (userdata)
--              IsPlayer                        	= bool IsPlayer()
--  Back compat: Is this entity a player pawn *or* controller? (userdata)
--              PrecacheScriptSound             	= void PrecacheScriptSound(string soundname)
--  Precache a sound for later playing. (userdata)
--              GetSoundDuration                	= float GetSoundDuration(string soundname, string actormodel)
--  Returns float duration of the sound. Takes soundname and optional actormodelname. (userdata)
--              StopSound                       	= void StopSound(string soundname)
--  Stops a named sound playing from this entity. (userdata)
--              EmitSoundParams                 	= void EmitSoundParams(string soundname, int nPitch, float flVolume, float flDelay)
--  Plays/modifies a sound from this entity. changes sound if nPitch and/or flVol or flSoundTime is > 0. (userdata)
--              EmitSound                       	= void EmitSound(string soundname)
--  Plays a sound from this entity. (userdata)
--              OverrideFriction                	= void OverrideFriction(float duration, float friction)
--  Takes duration, value for a temporary override. (userdata)
--              GetBaseVelocity                 	= Vector GetBaseVelocity()
--  Get Base? velocity. (userdata)
--              GetLocalAngularVelocity         	= QAngle GetLocalAngularVelocity()
--  Maybe local angvel (userdata)
--              ApplyLocalAngularVelocityImpulse	= void ApplyLocalAngularVelocityImpulse(Vector angImpulse)
--  Apply an Ang Velocity Impulse (userdata)
--              ApplyAbsVelocityImpulse         	= void ApplyAbsVelocityImpulse(Vector vecImpulse)
--  Apply a Velocity Impulse (userdata)
--              GetVelocity                     	= Vector GetVelocity()
--   (userdata)
--              GetLocalVelocity                	= Vector GetLocalVelocity()
--  Get Entity relative velocity. (userdata)
--              SetVelocity                     	= void SetVelocity(Vector vecVelocity)
--   (userdata)
--              SetFriction                     	= void SetFriction(float flFriction)
--  Set PLAYER friction, ignored for objects. (userdata)
--              SetGravity                      	= void SetGravity(float flGravity)
--  Set PLAYER gravity, ignored for objects. (userdata)
--              GetHealth                       	= int GetHealth()
--  Get the health of this entity. (userdata)
--              SetHealth                       	= void SetHealth(int nHealth)
--  Set the health of this entity. (userdata)
--              Kill                            	= void Kill()
--   (userdata)
--              GetForwardVector                	= Vector GetForwardVector()
--  Get the forward vector of the entity. (userdata)
--              GetRightVector                  	= Vector GetRightVector()
--  Get the right vector of the entity. WARNING: This produces a left-handed coordinate system. Use GetLeftVector instead (which is aligned with the y axis of the entity). (userdata)
--              GetLeftVector                   	= Vector GetLeftVector()
--  Get the left vector of the entity. (userdata)
--              GetUpVector                     	= Vector GetUpVector()
--  Get the up vector of the entity. (userdata)
--              GetModelName                    	= string GetModelName()
--  Returns the name of the model. (userdata)
--              GetMoveParent                   	= handle GetMoveParent()
--  If in hierarchy, retrieves the entity's parent. (userdata)
--              GetRootMoveParent               	= handle GetRootMoveParent()
--  If in hierarchy, walks up the hierarchy to find the root parent. (userdata)
--              FirstMoveChild                  	= handle FirstMoveChild()
--   (userdata)
--              NextMovePeer                    	= handle NextMovePeer()
--   (userdata)
--              GetOwnerEntity                  	= handle GetOwnerEntity()
--  Get the owner entity, if there is one (userdata)
--              GetChildren                     	= handle GetChildren()
--  Get the entities parented to this entity. (userdata)
--              SetParent                       	= void SetParent(handle hParent, string pAttachmentname)
--  Set the parent for this entity. (userdata)
--              SetConstraint                   	= void SetConstraint(Vector vPos)
--  Set the position of the constraint. (userdata)
--              EyePosition                     	= Vector EyePosition()
--  Get vector to eye position - absolute coords. (userdata)
--              SetAngles                       	= void SetAngles(float fPitch, float fYaw, float fRoll)
--  Set entity pitch, yaw, roll by component. (userdata)
--              SetAbsAngles                    	= void SetAbsAngles(float fPitch, float fYaw, float fRoll)
--  Set entity pitch, yaw, roll by component. (userdata)
--              GetAnglesAsVector               	= Vector GetAnglesAsVector()
--  Get entity pitch, yaw, roll as a vector. (userdata)
--              EyeAngles                       	= QAngle EyeAngles()
--  Get the qangles that this entity is looking at. (userdata)
--           }
--           SetContextNum                   	= function: 0x18940c28 (function)
--           GetContext                      	= function: 0x18940cd8 (function)
--           GatherCriteria                  	= function: 0x18940d88 (function)
--           TakeDamage                      	= function: 0x18940e38 (function)
--           IsAlive                         	= function: 0x18940ee8 (function)
--           IsPlayerPawn                    	= function: 0x18940f90 (function)
--           IsPlayerController              	= function: 0x18941040 (function)
--           IsNPC                           	= function: 0x189410f8 (function)
--           IsDOTANPC                       	= function: 0x189411a0 (function)
--           GetMaxHealth                    	= function: 0x18941250 (function)
--           SetMaxHealth                    	= function: 0x18941300 (function)
--           SetThink                        	= function: 0x18a07e70 (function)
--           StopThink                       	= function: 0x18a07ea0 (function)
--           IsInstance                      	= function: 0x18a07ed0 (function)
--           IsBaseNPC                       	= function: 0x18a37258 (function)
--           IsNull                          	= function: 0x1893ef68 (function)
--           GetOrigin                       	= function: 0x18944820 (function)
--           IsPlayer                        	= function: 0x18944770 (function)
--           PrecacheScriptSound             	= function: 0x189446b8 (function)
--           GetSoundDuration                	= function: 0x18944600 (function)
--           StopSound                       	= function: 0x18944550 (function)
--           EmitSoundParams                 	= function: 0x189444a0 (function)
--           EmitSound                       	= function: 0x189443f0 (function)
--           OverrideFriction                	= function: 0x18944338 (function)
--           GetBaseVelocity                 	= function: 0x18944288 (function)
--           GetLocalAngularVelocity         	= function: 0x189441d0 (function)
--           ApplyLocalAngularVelocityImpulse	= function: 0x18944108 (function)
--           ApplyAbsVelocityImpulse         	= function: 0x18944050 (function)
--           GetVelocity                     	= function: 0x18943fa0 (function)
--           GetLocalVelocity                	= function: 0x18941720 (function)
--           SetVelocity                     	= function: 0x18941670 (function)
--           SetFriction                     	= function: 0x189415c0 (function)
--           SetGravity                      	= function: 0x18941510 (function)
--           GetHealth                       	= function: 0x18941460 (function)
--           SetHealth                       	= function: 0x189413b0 (function)
--           SetContext                      	= function: 0x18942720 (function)
--           Kill                            	= function: 0x1893f020 (function)
--           GetForwardVector                	= function: 0x1893f108 (function)
--           GetRightVector                  	= function: 0x1893f1c0 (function)
--           GetLeftVector                   	= function: 0x1893f360 (function)
--           GetUpVector                     	= function: 0x1893f3e0 (function)
--           GetModelName                    	= function: 0x1893f2f8 (function)
--           GetMoveParent                   	= function: 0x1893f5c8 (function)
--           GetRootMoveParent               	= function: 0x1893f270 (function)
--           FirstMoveChild                  	= function: 0x1893f800 (function)
--           NextMovePeer                    	= function: 0x1893f490 (function)
--           GetOwnerEntity                  	= function: 0x1893fa38 (function)
--           GetChildren                     	= function: 0x1893fae8 (function)
--           SetParent                       	= function: 0x1893fb98 (function)
--           SetConstraint                   	= function: 0x1893fc48 (function)
--           EyePosition                     	= function: 0x1893fcf8 (function)
--           SetAngles                       	= function: 0x1893f678 (function)
--           SetAbsAngles                    	= function: 0x1893f728 (function)
--           GetAnglesAsVector               	= function: 0x1893f8b0 (function)
--           EyeAngles                       	= function: 0x1893f968 (function)
--           RedirectOutput                  	= function: 0x1893e050 (function)
--           DisconnectOutput                	= function: 0x18914378 (function)
--           DisconnectRedirectedOutput      	= function: 0x18914d70 (function)
--           GetEntityIndex                  	= function: 0x1893e240 (function)
--           entindex                        	= function: 0x1893e688 (function)
--           GetClassname                    	= function: 0x1893e788 (function)
--           GetEntityHandle                 	= function: 0x1893e808 (function)
--           Destroy                         	= function: 0x1893e888 (function)
--           GetPublicScriptScope            	= function: 0x1893e378 (function)
--           GetOrCreatePublicScriptScope    	= function: 0x1893e3f8 (function)
--           GetPrivateScriptScope           	= function: 0x1893e500 (function)
--           FDesc                           	= table: 0x1893dd58 (table)
--           {
--              RedirectOutput                  	= void RedirectOutput(string, string, handle)
--  Adds an I/O connection that will call the named function on the passed entity when the specified output fires. (userdata)
--              DisconnectOutput                	= void DisconnectOutput(string, string)
--  Removes a connected script function from an I/O event on this entity. (userdata)
--              DisconnectRedirectedOutput      	= void DisconnectRedirectedOutput(string, string, handle)
--  Removes a connected script function from an I/O event on the passed entity. (userdata)
--              GetEntityIndex                  	= int GetEntityIndex()
--   (userdata)
--              entindex                        	= int entindex()
--   (userdata)
--              GetClassname                    	= string GetClassname()
--   (userdata)
--              GetEntityHandle                 	= ehandle GetEntityHandle()
--  Get the entity as an EHANDLE (userdata)
--              Destroy                         	= void Destroy()
--   (userdata)
--              GetPublicScriptScope            	= handle GetPublicScriptScope()
--  Retrieve the public script-side data associated with an entity (userdata)
--              GetOrCreatePublicScriptScope    	= handle GetOrCreatePublicScriptScope()
--  Retrieve, creating if necessary, the public script-side data associated with an entity (userdata)
--              GetPrivateScriptScope           	= handle GetPrivateScriptScope()
--  Retrieve the private per-instance script-side data associated with an entity (userdata)
--              GetOrCreatePrivateScriptScope   	= handle GetOrCreatePrivateScriptScope()
--  Retrieve, creating if necessary, the private per-instance script-side data associated with an entity (userdata)
--              FireOutput                      	= void FireOutput(string, handle, handle, table, float)
--  Fire an entity output (userdata)
--              RemoveSelf                      	= void RemoveSelf()
--  Delete this entity (userdata)
--              GetIntAttr                      	= int GetIntAttr(string)
--  Get Integer Attribute (userdata)
--              SetIntAttr                      	= void SetIntAttr(string, int)
--  Set Integer Attribute (userdata)
--              GetName                         	= string GetName()
--   (userdata)
--              GetDebugName                    	= string GetDebugName()
--  Get the entity name w/help if not defined (i.e. classname/etc) (userdata)
--              ConnectOutput                   	= void ConnectOutput(string, string)
--  Adds an I/O connection that will call the named function on this entity when the specified output fires. (userdata)
--           }
--           GetOrCreatePrivateScriptScope   	= function: 0x1893e580 (function)
--           IsNull                          	= function: 0x1893dcc0 (function)
--           FireOutput                      	= function: 0x1893ddd8 (function)
--           RemoveSelf                      	= function: 0x1893def0 (function)
--           GetIntAttr                      	= function: 0x1893dfa0 (function)
--           SetIntAttr                      	= function: 0x1893e140 (function)
--           GetName                         	= function: 0x1893e708 (function)
--           GetDebugName                    	= function: 0x1893e0d8 (function)
--           ConnectOutput                   	= function: 0x1893e2f8 (function)
--        }
--        IsRefreshable                   	= function: 0x189f23c0 (function)
--        IsCosmetic                      	= function: 0x189f25c0 (function)
--        GetChannelTime                  	= function: 0x189f00f0 (function)
--        GetChannelStartTime             	= function: 0x189efe20 (function)
--        GetCastRange                    	= function: 0x189efda0 (function)
--        GetEffectiveCastRange           	= function: 0x189eff28 (function)
--        GetCastPoint                    	= function: 0x189efd20 (function)
--        GetAOERadius                    	= function: 0x189efa48 (function)
--        CastFilterResult_Engine         	= function: 0x189f00a8 (function)
--        GetCustomCastError_Engine       	= function: 0x189f0b48 (function)
--        IsAttributeBonus                	= function: 0x189efbb0 (function)
--        ProcsMagicStick                 	= function: 0x189f2440 (function)
--        GetCooldown                     	= function: 0x189f04b8 (function)
--        FDesc                           	= table: 0x189efa00 (table)
--        {
--           OnAbilityPhaseStart             	= bool OnAbilityPhaseStart()
--  Cast time begins (return true for successful cast). (userdata)
--           OnAbilityPhaseInterrupted       	= void OnAbilityPhaseInterrupted()
--  Cast time did not complete successfully. (userdata)
--           OnSpellStart                    	= void OnSpellStart()
--  Cast time finished, spell effects begin. (userdata)
--           OnChannelFinish                 	= void OnChannelFinish(bool bInterrupted)
--  (bool bInterrupted) Channel finished. (userdata)
--           OnUpgrade                       	= void OnUpgrade()
--  Ability gained a level. (userdata)
--           OnOwnerSpawned                  	= void OnOwnerSpawned()
--  Caster respawned or spawned for the first time. (userdata)
--           OnToggle                        	= void OnToggle()
--  Ability is toggled on/off. (userdata)
--           OnOwnerDied                     	= void OnOwnerDied()
--  Caster died. (userdata)
--           GetAssociatedPrimaryAbilities   	= string GetAssociatedPrimaryAbilities()
--  Returns abilities that are stolen simultaneously, or otherwise related in functionality. (userdata)
--           GetManaCost                     	= int GetManaCost(int iLevel)
--  Return mana cost at the given level (-1 is current). (userdata)
--           GetChannelStartTime             	= float GetChannelStartTime()
--  Return the channel start time of this ability. (userdata)
--           GetChannelledManaCostPerSecond  	= int GetChannelledManaCostPerSecond(int iLevel)
--  Return mana cost at the given level per second while channeling (-1 is current). (userdata)
--           GetHealthCost                   	= int GetHealthCost(int iLevel)
--  Return health cost at the given level (-1 is current). (userdata)
--           SpeakTrigger                    	= int SpeakTrigger()
--  Return the type of speech used. (userdata)
--           GetChannelledHealthCostPerSecond	= int GetChannelledHealthCostPerSecond(int iLevel)
--  Return health cost per second of channeling at the given level (-1 is current). (userdata)
--           GetGoldCost                     	= int GetGoldCost(int iLevel)
--  Return gold cost at the given level (-1 is current). (userdata)
--           GetCastPoint                    	= float GetCastPoint()
--  Return cast point of this ability. (userdata)
--           GetIntrinsicModifierName        	= string GetIntrinsicModifierName()
--  Returns the name of the modifier applied passively by this ability. (userdata)
--           GetAOERadius                    	= float GetAOERadius()
--  Controls the size of the AOE casting cursor. (userdata)
--           OnHeroLevelUp                   	= void OnHeroLevelUp()
--  Caster gained a level. (userdata)
--           OnHeroCalculateStatBonus        	= void OnHeroCalculateStatBonus()
--  Caster (hero only) gained a level, skilled an ability, or received a new stat bonus. (userdata)
--           GetConceptRecipientType         	= int GetConceptRecipientType()
--  Return who hears speech when this spell is cast. (userdata)
--           OnChannelThink                  	= void OnChannelThink(float flInterval)
--  (float flInterval) Channeling is taking place. (userdata)
--           CastFilterResultLocation        	= int CastFilterResultLocation(Vector vLocation)
--  (Vector vLocation) Determine whether an issued command on a location is valid. (userdata)
--           CastFilterResult                	= int CastFilterResult()
--  Determine whether an issued command with no target is valid. (userdata)
--           GetCustomCastErrorTarget        	= string GetCustomCastErrorTarget(handle hTarget)
--  (HSCRIPT hTarget) Return the error string of a failed command on a target. (userdata)
--           GetCustomCastErrorLocation      	= string GetCustomCastErrorLocation(Vector vLocation)
--  (Vector vLocation) Return the error string of a failed command on a location. (userdata)
--           GetCustomCastError              	= string GetCustomCastError()
--  Return the error string of a failed command with no target. (userdata)
--           GetCustomHudErrorMessage        	= string GetCustomHudErrorMessage(int nReason)
--  (DOTA_INVALID_ORDERS nReason) Return the error string of a failed order. (userdata)
--           OnProjectileHit                 	= bool OnProjectileHit(handle hTarget, Vector vLocation)
--  (HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid). (userdata)
--           IsAttributeBonus                	= bool IsAttributeBonus()
--  Is this ability an Attribute Bonus. (userdata)
--           OnInventoryContentsChanged      	= void OnInventoryContentsChanged()
--  Caster inventory changed. (userdata)
--           OnItemEquipped                  	= void OnItemEquipped(handle hItem)
--  ( HSCRIPT hItem ) Caster equipped item. (userdata)
--           OnStolen                        	= void OnStolen(handle hSourceAbility)
--  ( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal. (userdata)
--           GetCooldown                     	= float GetCooldown(int iLevel)
--  Return cooldown of this ability. (userdata)
--           OnHeroDiedNearby                	= void OnHeroDiedNearby(handle unit, handle attacker, handle table)
--  A hero has died in the vicinity (ie Urn), takes table of params. (userdata)
--           IsHiddenWhenStolen              	= bool IsHiddenWhenStolen()
--  Returns true if this ability is hidden when stolen by Spell Steal. (userdata)
--           IsHiddenAbilityCastable         	= bool IsHiddenAbilityCastable()
--  Returns true if this ability can be used when not on the action panel. (userdata)
--           IsRefreshable                   	= bool IsRefreshable()
--  Returns true if this ability is refreshed by Refresher Orb. (userdata)
--           IsCosmetic                      	= bool IsCosmetic(handle hEntity)
--  Is this a cosmetic only ability? (userdata)
--           RequiresFacing                  	= bool RequiresFacing()
--  Does this ability need the caster to face the target before executing? (userdata)
--           ResetToggleOnRespawn            	= bool ResetToggleOnRespawn()
--  Returns true if this ability should return to the default toggle state when its parent respawns. (userdata)
--           ProcsMagicStick                 	= bool ProcsMagicStick()
--  Returns true if this ability will generate magic stick charges for nearby enemies. (userdata)
--           OnProjectileHit_ExtraData       	= bool OnProjectileHit_ExtraData(handle hTarget, Vector vLocation, handle table)
--  (HSCRIPT hTarget, Vector vLocation, table kv) Projectile has collided with a given target or reached its destination (target is invalid). (userdata)
--           OnProjectileHitHandle           	= bool OnProjectileHitHandle(handle hTarget, Vector vLocation, int iProjectileHandle)
--  (HSCRIPT hTarget, Vector vLocation, int nHandle) Projectile has collided with a given target or reached its destination (target is invalid). (userdata)
--           OnProjectileThinkHandle         	= void OnProjectileThinkHandle(int iProjectileHandle)
--  (int nProjectileHandle) Projectile is actively moving. (userdata)
--           OnProjectileThink_ExtraData     	= void OnProjectileThink_ExtraData(Vector vLocation, handle table)
--  (Vector vLocation, table kv ) Projectile is actively moving. (userdata)
--           GetAbilityChargeRestoreTime     	= float GetAbilityChargeRestoreTime(int iLevel)
--   (userdata)
--           GetCastAnimation                	= int GetCastAnimation()
--  Return casting animation of this ability. (userdata)
--           GetChannelAnimation             	= int GetChannelAnimation()
--  Return channel animation of this ability. (userdata)
--           OtherAbilitiesAlwaysInterruptChanneling	= bool OtherAbilitiesAlwaysInterruptChanneling()
--   (userdata)
--           IsStealable                     	= bool IsStealable()
--  Returns true if this ability can be stolen by Spell Steal. (userdata)
--           GetAssociatedSecondaryAbilities 	= string GetAssociatedSecondaryAbilities()
--  Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities. (userdata)
--           GetPlaybackRateOverride         	= float GetPlaybackRateOverride()
--  Return the animation rate of the cast animation. (userdata)
--           OnAbilityUpgrade                	= void OnAbilityUpgrade(handle hUpgradeAbility)
--   (userdata)
--           GetCastRangeBonus               	= int GetCastRangeBonus(handle hTarget, int iPseudoCastRange)
--   (userdata)
--           GetBehavior                     	= uint64 GetBehavior()
--  Return cast behavior type of this ability. (userdata)
--           OnUnStolen                      	= void OnUnStolen()
--  Special behavior when lost by Spell Steal. (userdata)
--           OnProjectileThink               	= void OnProjectileThink(Vector vLocation)
--  (Vector vLocation) Projectile is actively moving. (userdata)
--           OnAbilityPinged                 	= void OnAbilityPinged(int nPlayerID, bool bCtrlHeld)
--  The ability was pinged (nPlayerID, bCtrlHeld). (userdata)
--           CastFilterResultTarget          	= int CastFilterResultTarget(handle hTarget)
--  (HSCRIPT hTarget) Determine whether an issued command on a target is valid. (userdata)
--           GetEffectiveCastRange           	= int GetEffectiveCastRange(Vector vLocation, handle hTarget)
--  Return cast range of this ability, accounting for modifiers. (userdata)
--           GetCastRange                    	= int GetCastRange(Vector vLocation, handle hTarget)
--  Return cast range of this ability. (userdata)
--           GetChannelTime                  	= float GetChannelTime()
--  Return the channel time of this ability. (userdata)
--        }
--        GetBehavior                     	= function: 0x189efb30 (function)
--        OnAbilityPhaseStart             	= function: 0x189f0dc8 (function)
--        OnAbilityPhaseInterrupted       	= function: 0x189f0e48 (function)
--        OnSpellStart                    	= function: 0x189f0d48 (function)
--        OnChannelFinish                 	= function: 0x189f0f48 (function)
--        OnUpgrade                       	= function: 0x189f0970 (function)
--        OnOwnerSpawned                  	= function: 0x189f0870 (function)
--        OnToggle                        	= function: 0x189f0cc8 (function)
--        OnOwnerDied                     	= function: 0x189f08f0 (function)
--        GetManaCost                     	= function: 0x189efc30 (function)
--        GetChannelledManaCostPerSecond  	= function: 0x189efea0 (function)
--        GetHealthCost                   	= function: 0x189f03b8 (function)
--        GetChannelledHealthCostPerSecond	= function: 0x189f0438 (function)
--        GetGoldCost                     	= function: 0x189f0338 (function)
--        GetCastRangeBonus               	= function: 0x189efcb8 (function)
--        GetIntrinsicModifierName        	= function: 0x189f2240 (function)
--        ResetToggleOnRespawn            	= function: 0x189f24c0 (function)
--        OnHeroLevelUp                   	= function: 0x189f09f0 (function)
--        OnHeroCalculateStatBonus        	= function: 0x189f1c98 (function)
--        OnChannelThink                  	= function: 0x189f0ec8 (function)
--        CastFilterResultLocation        	= function: 0x189f0028 (function)
--        IsNull                          	= function: 0x189ef990 (function)
--        GetConceptRecipientType         	= function: 0x189f2708 (function)
--        GetCustomCastErrorLocation      	= function: 0x189f02b0 (function)
--        GetCustomCastError              	= function: 0x18a374c8 (function)
--        GetCustomHudErrorMessage        	= function: 0x189f0bc8 (function)
--        OnProjectileHit                 	= function: 0x189f0fc8 (function)
--        OnProjectileThink               	= function: 0x189f0678 (function)
--        OnInventoryContentsChanged      	= function: 0x189f0a70 (function)
--        OnItemEquipped                  	= function: 0x189f1c18 (function)
--        GetAssociatedSecondaryAbilities 	= function: 0x189f21c0 (function)
--        OnUnStolen                      	= function: 0x189f1d98 (function)
--        OnHeroDiedNearby                	= function: 0x189f1e18 (function)
--        IsHiddenWhenStolen              	= function: 0x189f2340 (function)
--        IsHiddenAbilityCastable         	= function: 0x189f01b0 (function)
--        OnProjectileHit_ExtraData       	= function: 0x189f0538 (function)
--        OnProjectileHitHandle           	= function: 0x189f05f8 (function)
--        OnProjectileThinkHandle         	= function: 0x189f06f8 (function)
--        OnProjectileThink_ExtraData     	= function: 0x189f07b0 (function)
--        GetAbilityChargeRestoreTime     	= function: 0x189f0c48 (function)
--        GetCastAnimation                	= function: 0x189f1fd0 (function)
--        GetChannelAnimation             	= function: 0x189f2088 (function)
--        OtherAbilitiesAlwaysInterruptChanneling	= function: 0x189f2640 (function)
--        GetPlaybackRateOverride         	= function: 0x189f1048 (function)
--        SpeakTrigger                    	= function: 0x189f2788 (function)
--        CastFilterResult                	= function: 0x18a37498 (function)
--        CastFilterResultTarget          	= function: 0x189effa8 (function)
--        GetAssociatedPrimaryAbilities   	= function: 0x189f2140 (function)
--        OnAbilityUpgrade                	= function: 0x189f1f18 (function)
--        OnAbilityPinged                 	= function: 0x189f1e98 (function)
--        IsStealable                     	= function: 0x189f22c0 (function)
--        RequiresFacing                  	= function: 0x189f2540 (function)
--        OnStolen                        	= function: 0x189f1d18 (function)
--        GetCustomCastErrorTarget        	= function: 0x189f0230 (function)
--     }
--     damageTable                     	= table: 0x1962eb00 (table)
--     {
--        attacker                        	= table: 0x193b4368 (table)
--        {
--           metatable = table: 0x18997678
--           {
--              AddExperience_Engine            	= function: 0x189c8320 (function)
--              GetPrimaryAttribute             	= function: 0x189cd1b8 (function)
--              SetPrimaryAttribute             	= function: 0x189cd270 (function)
--              PerformTaunt                    	= function: 0x189cd328 (function)
--              GetCurrentXP                    	= function: 0x189cd3d8 (function)
--              WillReincarnate                 	= function: 0x189cd508 (function)
--              HasOwnerAbandoned               	= function: 0x189cd5b8 (function)
--              GetReplicatingOtherHero         	= function: 0x189cd670 (function)
--              SetBotDifficulty                	= function: 0x189cd728 (function)
--              SetRespawnPosition              	= function: 0x189cd7e0 (function)
--              SetStashEnabled                 	= function: 0x189cd898 (function)
--              IsStashEnabled                  	= function: 0x189cd948 (function)
--              IncrementDeaths_Engine          	= function: 0x189caac0 (function)
--              CalculateStatBonus              	= function: 0x18997778 (function)
--              ShouldDoFlyHeightVisual         	= function: 0x189c7fc8 (function)
--              GetTogglableWearable            	= function: 0x189c81f0 (function)
--              GetPlayerID                     	= function: 0x189c8270 (function)
--              FDesc                           	= table: 0x18997730 (table)
--              {
--                 GetPrimaryAttribute             	= int GetPrimaryAttribute()
--  0 = strength, 1 = agility, 2 = intelligence. (userdata)
--                 SetPrimaryAttribute             	= void SetPrimaryAttribute(int nPrimaryAttribute)
--  Set this hero's primary attribute value. (userdata)
--                 PerformTaunt                    	= void PerformTaunt()
--   (userdata)
--                 GetCurrentXP                    	= int GetCurrentXP()
--  Returns the amount of XP  (userdata)
--                 WillReincarnate                 	= bool WillReincarnate()
--   (userdata)
--                 HasOwnerAbandoned               	= bool HasOwnerAbandoned()
--   (userdata)
--                 GetReplicatingOtherHero         	= handle GetReplicatingOtherHero()
--   (userdata)
--                 SetBotDifficulty                	= void SetBotDifficulty(int nDifficulty)
--   (userdata)
--                 SetRespawnPosition              	= void SetRespawnPosition(Vector vOrigin)
--   (userdata)
--                 SetStashEnabled                 	= void SetStashEnabled(bool bEnabled)
--   (userdata)
--                 IsStashEnabled                  	= bool IsStashEnabled()
--   (userdata)
--                 CalculateStatBonus              	= void CalculateStatBonus(bool bForce)
--  Recalculate all stats after the hero gains stats. (userdata)
--                 ShouldDoFlyHeightVisual         	= bool ShouldDoFlyHeightVisual()
--   (userdata)
--                 GetTogglableWearable            	= handle GetTogglableWearable(int nSlotType)
--  Get wearable entity in slot (slot) (userdata)
--                 GetPlayerID                     	= int GetPlayerID()
--  Returns player ID of the player owning this hero (userdata)
--                 GetHeroID                       	= int GetHeroID()
--   (userdata)
--                 SetPlayerID                     	= void SetPlayerID(int iPlayerID)
--   (userdata)
--                 GetDeathGoldCost                	= int GetDeathGoldCost()
--   (userdata)
--                 HeroLevelUp                     	= void HeroLevelUp(bool bPlayEffects)
--  Levels up the hero, true or false to play effects. (userdata)
--                 AddExperience                   	= bool AddExperience(float flXP, int nReason, bool bApplyBotDifficultyScaling, bool bIncrementTotal)
--  Params: Float XP, Bool applyBotDifficultyScaling (userdata)
--                 GetAbilityPoints                	= int GetAbilityPoints()
--  Gets the current unspent ability points. (userdata)
--                 SetAbilityPoints                	= void SetAbilityPoints(int iPoints)
--  Sets the current unspent ability points. (userdata)
--                 SetCustomDeathXP                	= void SetCustomDeathXP(int iValue)
--  Sets a custom experience value for this hero.  Note, GameRules boolean must be set for this to work! (userdata)
--                 RespawnHero                     	= void RespawnHero(bool bBuyBack, bool bRespawnPenalty)
--  Respawn this hero. (userdata)
--                 GetBaseDamageMax                	= int GetBaseDamageMax()
--  Hero damage is also affected by attributes. (userdata)
--                 Buyback                         	= void Buyback()
--  Spend the gold and buyback with this hero. (userdata)
--                 GetBuybackCost                  	= int GetBuybackCost(bool bReturnOldValues)
--  Return integer value for the gold cost of a buyback. (userdata)
--                 GetBuybackCooldownTime          	= float GetBuybackCooldownTime()
--  Return float value for the amount of time left on cooldown for this hero's buyback. (userdata)
--                 SetBuybackCooldownTime          	= void SetBuybackCooldownTime(float flTime)
--  Sets the buyback cooldown time. (userdata)
--                 GetBuybackGoldLimitTime         	= float GetBuybackGoldLimitTime()
--  Returns the amount of time gold gain is limited after buying back. (userdata)
--                 SetBuybackGoldLimitTime         	= void SetBuybackGoldLimitTime(float flTime)
--  Set the amount of time gold gain is limited after buying back. (userdata)
--                 CanEarnGold                     	= bool CanEarnGold()
--  Returns boolean value result of buyback gold limit time less than game time. (userdata)
--                 GetPhysicalArmorBaseValue       	= float GetPhysicalArmorBaseValue()
--  Hero armor is affected by attributes. (userdata)
--                 IsBuybackDisabledByReapersScythe	= bool IsBuybackDisabledByReapersScythe()
--   (userdata)
--                 GetStrength                     	= float GetStrength()
--   (userdata)
--                 GetAgility                      	= float GetAgility()
--   (userdata)
--                 GetIntellect                    	= float GetIntellect()
--   (userdata)
--                 GetBaseStrength                 	= float GetBaseStrength()
--   (userdata)
--                 GetBaseAgility                  	= float GetBaseAgility()
--   (userdata)
--                 GetBaseIntellect                	= float GetBaseIntellect()
--   (userdata)
--                 SetBaseStrength                 	= void SetBaseStrength(float flStrength)
--   (userdata)
--                 SetBaseAgility                  	= void SetBaseAgility(float flAgility)
--   (userdata)
--                 SetBaseIntellect                	= void SetBaseIntellect(float flIntellect)
--   (userdata)
--                 GetStrengthGain                 	= float GetStrengthGain()
--   (userdata)
--                 GetAgilityGain                  	= float GetAgilityGain()
--   (userdata)
--                 GetIncreasedAttackSpeed         	= float GetIncreasedAttackSpeed()
--  Hero attack speed is also affected by agility. (userdata)
--                 ModifyStrength                  	= void ModifyStrength(float flNewStrength)
--  Adds passed value to base attribute value, then calls CalculateStatBonus. (userdata)
--                 ModifyAgility                   	= void ModifyAgility(float flNewAgility)
--  Adds passed value to base attribute value, then calls CalculateStatBonus. (userdata)
--                 ModifyIntellect                 	= void ModifyIntellect(float flNewIntellect)
--  Adds passed value to base attribute value, then calls CalculateStatBonus. (userdata)
--                 GetRespawnTime                  	= float GetRespawnTime()
--   (userdata)
--                 GetAdditionalOwnedUnits         	= table GetAdditionalOwnedUnits()
--   (userdata)
--                 IncrementKills                  	= void IncrementKills(int iVictimID)
--  Passed ID is for the victim, killer ID is ID of the current hero.  Value is stored in PlayerResource. (userdata)
--                 IncrementDeaths                 	= void IncrementDeaths(int iKillerID)
--  Value is stored in PlayerResource. (userdata)
--                 IncrementAssists                	= void IncrementAssists(int iKillerID)
--  Value is stored in PlayerResource. (userdata)
--                 IncrementLastHits               	= void IncrementLastHits()
--  Value is stored in PlayerResource. (userdata)
--                 IncrementDenies                 	= void IncrementDenies()
--  Value is stored in PlayerResource. (userdata)
--                 IncrementNearbyCreepDeaths      	= void IncrementNearbyCreepDeaths()
--  Value is stored in PlayerResource. (userdata)
--                 RecordLastHit                   	= void RecordLastHit()
--   (userdata)
--                 IncrementLastHitStreak          	= void IncrementLastHitStreak()
--  Value is stored in PlayerResource. (userdata)
--                 ClearLastHitStreak              	= void ClearLastHitStreak()
--  Value is stored in PlayerResource. (userdata)
--                 IncrementLastHitMultikill       	= void IncrementLastHitMultikill()
--  Value is stored in PlayerResource. (userdata)
--                 ClearLastHitMultikill           	= void ClearLastHitMultikill()
--  Value is stored in PlayerResource. (userdata)
--                 GetKills                        	= int GetKills()
--  Value is stored in PlayerResource. (userdata)
--                 GetDeaths                       	= int GetDeaths()
--  Value is stored in PlayerResource. (userdata)
--                 GetAssists                      	= int GetAssists()
--  Value is stored in PlayerResource. (userdata)
--                 GetLastHits                     	= int GetLastHits()
--  Value is stored in PlayerResource. (userdata)
--                 GetDenies                       	= int GetDenies()
--  Value is stored in PlayerResource. (userdata)
--                 IncrementStreak                 	= void IncrementStreak()
--  Value is stored in PlayerResource. (userdata)
--                 ClearStreak                     	= void ClearStreak()
--  Value is stored in PlayerResource. (userdata)
--                 GetStreak                       	= int GetStreak()
--  Value is stored in PlayerResource. (userdata)
--                 GetMultipleKillCount            	= int GetMultipleKillCount()
--   (userdata)
--                 KilledHero                      	= void KilledHero(handle hHero, handle hInflictor)
--  Args: Hero, Inflictor (userdata)
--                 ModifyGold                      	= int ModifyGold(int iGoldChange, bool bReliable, int iReason)
--  Gives this hero some gold.  Args: int nGoldChange, bool bReliable, int reason (userdata)
--                 ModifyGoldFiltered              	= int ModifyGoldFiltered(int iGoldChange, bool bReliabe, int iReason)
--  Gives this hero some gold, using the gold filter if extra filtering is on.  Args: int nGoldChange, bool bReliable, int reason (userdata)
--                 SetGold                         	= void SetGold(int iGold, bool bReliable)
--  Sets the gold amount for the player owning this hero (userdata)
--                 SpendGold                       	= void SpendGold(int iCost, int iReason)
--  Args: int nGold, int nReason (userdata)
--                 GetGold                         	= int GetGold()
--  Returns gold amount for the player owning this hero (userdata)
--                 GetBonusDamageFromPrimaryStat   	= int GetBonusDamageFromPrimaryStat()
--   (userdata)
--                 GetPrimaryStatValue             	= float GetPrimaryStatValue()
--   (userdata)
--                 GetNumAttackers                 	= int GetNumAttackers()
--   (userdata)
--                 GetAttacker                     	= int GetAttacker(int nIndex)
--   (userdata)
--                 GetMostRecentDamageTime         	= float GetMostRecentDamageTime()
--   (userdata)
--                 GetTimeUntilRespawn             	= float GetTimeUntilRespawn()
--   (userdata)
--                 SetTimeUntilRespawn             	= void SetTimeUntilRespawn(float time)
--   (userdata)
--                 GetRespawnsDisabled             	= bool GetRespawnsDisabled()
--  Is this hero prevented from respawning? (userdata)
--                 SetRespawnsDisabled             	= void SetRespawnsDisabled(bool bDisableRespawns)
--  Prevent this hero from respawning. (userdata)
--                 HasRoomForItem                  	= int HasRoomForItem(string pItemName, bool bIncludeStashCombines, bool bAllowSelling)
--  Args: const char* pItemName, bool bIncludeStashCombines, bool bAllowSelling (userdata)
--                 HasAnyAvailableInventorySpace   	= bool HasAnyAvailableInventorySpace()
--   (userdata)
--                 GetNumItemsInStash              	= int GetNumItemsInStash()
--   (userdata)
--                 GetNumItemsInInventory          	= int GetNumItemsInInventory()
--   (userdata)
--                 IsReincarnating                 	= bool IsReincarnating()
--   (userdata)
--                 GetGoldBounty                   	= int GetGoldBounty()
--   (userdata)
--                 UpgradeAbility                  	= void UpgradeAbility(handle hAbility)
--  This upgrades the passed ability if it exists and the hero has enough ability points. (userdata)
--                 SetBuyBackDisabledByReapersScythe	= void SetBuyBackDisabledByReapersScythe(bool bBuybackDisabled)
--   (userdata)
--                 GetBaseManaRegen                	= float GetBaseManaRegen()
--  Returns the base mana regen. (userdata)
--                 GetBaseDamageMin                	= int GetBaseDamageMin()
--  Hero damage is also affected by attributes. (userdata)
--                 HasFlyingVision                 	= bool HasFlyingVision()
--   (userdata)
--                 GetIntellectGain                	= float GetIntellectGain()
--   (userdata)
--              }
--              SetPlayerID                     	= function: 0x189c8458 (function)
--              GetDeathGoldCost                	= function: 0x189c8100 (function)
--              HeroLevelUp                     	= function: 0x189c8690 (function)
--              AddExperience                   	= function: 0x18a37318 (function)
--              GetAbilityPoints                	= function: 0x189c88c8 (function)
--              SetAbilityPoints                	= function: 0x189c8980 (function)
--              SetCustomDeathXP                	= function: 0x189c8a38 (function)
--              RespawnHero                     	= function: 0x189c8af0 (function)
--              GetBaseDamageMax                	= function: 0x189c8508 (function)
--              Buyback                         	= function: 0x189c91f0 (function)
--              GetBuybackCost                  	= function: 0x189c9270 (function)
--              GetBuybackCooldownTime          	= function: 0x189c9320 (function)
--              SetBuybackCooldownTime          	= function: 0x189c93d8 (function)
--              GetBuybackGoldLimitTime         	= function: 0x189c9490 (function)
--              SetBuybackGoldLimitTime         	= function: 0x189c9548 (function)
--              CanEarnGold                     	= function: 0x189c9600 (function)
--              GetPhysicalArmorBaseValue       	= function: 0x189c8588 (function)
--              IsBuybackDisabledByReapersScythe	= function: 0x189c9778 (function)
--              GetStrength                     	= function: 0x189c9840 (function)
--              GetAgility                      	= function: 0x189c98f0 (function)
--              GetIntellect                    	= function: 0x189c8c20 (function)
--              GetBaseStrength                 	= function: 0x189c8cd0 (function)
--              GetBaseAgility                  	= function: 0x189c8d80 (function)
--              GetBaseIntellect                	= function: 0x189c8e30 (function)
--              SetBaseStrength                 	= function: 0x189c8ee8 (function)
--              SetBaseAgility                  	= function: 0x189c8f98 (function)
--              SetBaseIntellect                	= function: 0x189c9048 (function)
--              GetStrengthGain                 	= function: 0x189c9100 (function)
--              GetAgilityGain                  	= function: 0x189c91b0 (function)
--              GetIncreasedAttackSpeed         	= function: 0x189c87b8 (function)
--              ModifyStrength                  	= function: 0x189ca698 (function)
--              ModifyAgility                   	= function: 0x189ca748 (function)
--              ModifyIntellect                 	= function: 0x189ca7f8 (function)
--              GetRespawnTime                  	= function: 0x189ca8a8 (function)
--              GetAdditionalOwnedUnits         	= function: 0x189ca958 (function)
--              IncrementKills                  	= function: 0x189caa10 (function)
--              IncrementDeaths                 	= function: 0x18a37348 (function)
--              IncrementAssists                	= function: 0x189cab70 (function)
--              IncrementLastHits               	= function: 0x189cac28 (function)
--              IncrementDenies                 	= function: 0x189cace0 (function)
--              IncrementNearbyCreepDeaths      	= function: 0x189cad90 (function)
--              RecordLastHit                   	= function: 0x189cae50 (function)
--              IncrementLastHitStreak          	= function: 0x189caf00 (function)
--              ClearLastHitStreak              	= function: 0x189cafb8 (function)
--              IsNull                          	= function: 0x189976c0 (function)
--              ClearLastHitMultikill           	= function: 0x189cb130 (function)
--              GetKills                        	= function: 0x189cb1e8 (function)
--              GetDeaths                       	= function: 0x189cb298 (function)
--              GetAssists                      	= function: 0x189cb348 (function)
--              GetLastHits                     	= function: 0x189cb3f8 (function)
--              GetDenies                       	= function: 0x189cb4a8 (function)
--              IncrementStreak                 	= function: 0x189cb558 (function)
--              ClearStreak                     	= function: 0x189c99a0 (function)
--              GetStreak                       	= function: 0x189c9a50 (function)
--              GetMultipleKillCount            	= function: 0x189c9b00 (function)
--              KilledHero                      	= function: 0x189c9bb8 (function)
--              ModifyGold                      	= function: 0x189c9c68 (function)
--              ModifyGoldFiltered              	= function: 0x189c9d18 (function)
--              SetGold                         	= function: 0x189c9dd0 (function)
--              SpendGold                       	= function: 0x189c9e50 (function)
--              GetGold                         	= function: 0x189c9f00 (function)
--              GetBonusDamageFromPrimaryStat   	= function: 0x189c9f80 (function)
--              GetPrimaryStatValue             	= function: 0x189ca040 (function)
--              GetNumAttackers                 	= function: 0x189ca178 (function)
--              GetAttacker                     	= function: 0x189ca228 (function)
--              GetMostRecentDamageTime         	= function: 0x189ca2d8 (function)
--              GetTimeUntilRespawn             	= function: 0x189ca390 (function)
--              SetTimeUntilRespawn             	= function: 0x189ca448 (function)
--              GetRespawnsDisabled             	= function: 0x189ca500 (function)
--              SetRespawnsDisabled             	= function: 0x189cce50 (function)
--              HasRoomForItem                  	= function: 0x189ccf08 (function)
--              HasAnyAvailableInventorySpace   	= function: 0x189ccf88 (function)
--              GetNumItemsInStash              	= function: 0x189cd048 (function)
--              GetNumItemsInInventory          	= function: 0x189cd100 (function)
--              IsReincarnating                 	= function: 0x189cd488 (function)
--              GetGoldBounty                   	= function: 0x189ca0f8 (function)
--              SetBuyBackDisabledByReapersScythe	= function: 0x189c96b0 (function)
--              GetBaseManaRegen                	= function: 0x189c8608 (function)
--              UpgradeAbility                  	= function: 0x189c8838 (function)
--              GetBaseDamageMin                	= function: 0x189c8ba0 (function)
--              HasFlyingVision                 	= function: 0x189c8080 (function)
--              GetHeroID                       	= function: 0x189c8188 (function)
--              GetIntellectGain                	= function: 0x189ca5e0 (function)
--              IncrementLastHitMultikill       	= function: 0x189cb070 (function)
--              IsBaseNPC                       	= function: 0x18a372e8 (function)
--              IsHardDisarmed                  	= function: 0x18a37288 (function)
--              IsSoftDisarmed                  	= function: 0x18a372b8 (function)
--              SetCustomHealthLabel            	= function: 0x189c3da8 (function)
--              SetShouldDoFlyHeightVisual      	= function: 0x189c3ce8 (function)
--              SetCursorCastTarget             	= function: 0x189c3c30 (function)
--              SetRevealRadius                 	= function: 0x189c3b80 (function)
--              IsMoving                        	= function: 0x189c3ad0 (function)
--              RemoveAllModifiers              	= function: 0x189c3a18 (function)
--              Purge                           	= function: 0x189c3998 (function)
--              RemoveNoDraw                    	= function: 0x189c38e8 (function)
--              AddNoDraw                       	= function: 0x189c3838 (function)
--              GetCreationTime                 	= function: 0x189c37b8 (function)
--              AngerNearbyUnits                	= function: 0x189c3700 (function)
--              RespawnUnit                     	= function: 0x189c3650 (function)
--              SetUnitCanRespawn               	= function: 0x189c3598 (function)
--              UnitCanRespawn                  	= function: 0x189c3518 (function)
--              NotifyWearablesOfModelChange    	= function: 0x189c3458 (function)
--              WasKilledPassively              	= function: 0x1895a950 (function)
--              GetModelRadius                  	= function: 0x1895a8a0 (function)
--              DestroyAllSpeechBubbles         	= function: 0x1895a7e8 (function)
--              AddSpeechBubble                 	= function: 0x1895a738 (function)
--              SetOriginalModel                	= function: 0x1895a680 (function)
--              ManageModelChanges              	= function: 0x1895a5c8 (function)
--              IsPhantomBlocker                	= function: 0x1895a510 (function)
--              MakePhantomBlocker              	= function: 0x1895a458 (function)
--              IsChanneling                    	= function: 0x18958ba8 (function)
--              SetForceAttackTargetAlly        	= function: 0x18958ae8 (function)
--              IsInRangeOfShop                 	= function: 0x18954188 (function)
--              HasAttackCapability             	= function: 0x189bd390 (function)
--              HasAnyActiveAbilities           	= function: 0x18957880 (function)
--              HasFlyingVision                 	= function: 0x18957938 (function)
--              IsRangedAttacker                	= function: 0x189579e8 (function)
--              GetProjectileSpeed              	= function: 0x18957aa0 (function)
--              SetRangedProjectileName         	= function: 0x18957b58 (function)
--              GetRangedProjectileName         	= function: 0x18957c10 (function)
--              SetUnitName                     	= function: 0x18957cc8 (function)
--              GetUnitName                     	= function: 0x18957d78 (function)
--              GetUnitLabel                    	= function: 0x18957e28 (function)
--              ForceKill                       	= function: 0x18957ed8 (function)
--              AttackReady                     	= function: 0x18957f88 (function)
--              AttackNoEarlierThan             	= function: 0x18958038 (function)
--              TimeUntilNextAttack             	= function: 0x189580f0 (function)
--              GetLastAttackTime               	= function: 0x189581a8 (function)
--              GetAttackAnimationPoint         	= function: 0x18958260 (function)
--              IsAttackingEntity               	= function: 0x18958318 (function)
--              IsAttacking                     	= function: 0x189583d0 (function)
--              SetAttacking                    	= function: 0x18958480 (function)
--              GetAttackTarget                 	= function: 0x18958530 (function)
--              GetAggroTarget                  	= function: 0x189585e0 (function)
--              SetAggroTarget                  	= function: 0x18958690 (function)
--              AlertNearbyUnits                	= function: 0x18958740 (function)
--              GetAdditionalBattleMusicWeight  	= function: 0x189587f8 (function)
--              SetAdditionalBattleMusicWeight  	= function: 0x189588b8 (function)
--              GetForceAttackTarget            	= function: 0x18958978 (function)
--              SetForceAttackTarget            	= function: 0x18958a30 (function)
--              MakeVisibleDueToAttack          	= function: 0x1895a2e8 (function)
--              BoundingRadius2D                	= function: 0x1895a3a0 (function)
--              RemoveItem                      	= function: 0x18952bf8 (function)
--              TakeItem                        	= function: 0x18952ca8 (function)
--              SetCanSellItems                 	= function: 0x18952d58 (function)
--              CanSellItems                    	= function: 0x18952e08 (function)
--              AddItemByName                   	= function: 0x18952eb8 (function)
--              AddItem                         	= function: 0x18952f68 (function)
--              AddAbility                      	= function: 0x18952fe8 (function)
--              SwapItems                       	= function: 0x18953098 (function)
--              RemoveAbility                   	= function: 0x18953148 (function)
--              HasAbility                      	= function: 0x189531f8 (function)
--              RemoveAbilityByHandle           	= function: 0x189532a8 (function)
--              GetStatusResistance             	= function: 0x18953360 (function)
--              GetCursorPosition               	= function: 0x189baf70 (function)
--              GetCursorTargetingNothing       	= function: 0x189baff0 (function)
--              GetLevel                        	= function: 0x189a89d8 (function)
--              SetBaseMaxHealth                	= function: 0x18954238 (function)
--              GetBaseMaxHealth                	= function: 0x18954ef8 (function)
--              ModifyHealth                    	= function: 0x18954fb0 (function)
--              SetMana                         	= function: 0x18955060 (function)
--              SetMaxMana                      	= function: 0x189550e0 (function)
--              GetMana                         	= function: 0x18955190 (function)
--              GetMaxMana                      	= function: 0x18955210 (function)
--              GetManaPercent                  	= function: 0x189552c0 (function)
--              Script_ReduceMana               	= function: 0x18955370 (function)
--              GiveMana                        	= function: 0x18955428 (function)
--              SpendMana                       	= function: 0x189554d8 (function)
--              Heal                            	= function: 0x18955588 (function)
--              HealWithParams                  	= function: 0x18955608 (function)
--              GetAcquisitionRange             	= function: 0x189556b8 (function)
--              SetAcquisitionRange             	= function: 0x18955770 (function)
--              Script_GetAttackRange           	= function: 0x18955828 (function)
--              GetAttackRangeBuffer            	= function: 0x189558e0 (function)
--              GetBaseAttackRange              	= function: 0x18955998 (function)
--              GetAttackDamage                 	= function: 0x18955a50 (function)
--              GetAverageTrueAttackDamage      	= function: 0x18955b00 (function)
--              SetShouldComputeRemainingPathLength	= function: 0x18955bc0 (function)
--              GetRemainingPathLength          	= function: 0x18955c88 (function)
--              PerformAttack                   	= function: 0x18955d40 (function)
--              IsHero                          	= function: 0x18955e70 (function)
--              IsRealHero                      	= function: 0x18955ef0 (function)
--              IsConsideredHero                	= function: 0x18955fa0 (function)
--              IsCreepHero                     	= function: 0x18956058 (function)
--              IsOther                         	= function: 0x18956108 (function)
--              IsTower                         	= function: 0x18956188 (function)
--              IsBuilding                      	= function: 0x18956208 (function)
--              IsFort                          	= function: 0x189562b8 (function)
--              IsBarracks                      	= function: 0x18956338 (function)
--              IsCreep                         	= function: 0x189563e8 (function)
--              IsCourier                       	= function: 0x18956468 (function)
--              IsBoss                          	= function: 0x18956518 (function)
--              IsCreature                      	= function: 0x18956598 (function)
--              IsWard                          	= function: 0x18956648 (function)
--              IsHeroWard                      	= function: 0x189566c8 (function)
--              IsShrine                        	= function: 0x18956778 (function)
--              IsPhantom                       	= function: 0x18956828 (function)
--              IsZombie                        	= function: 0x189568d8 (function)
--              GetNeutralSpawnerName           	= function: 0x18956988 (function)
--              CanEntityBeSeenByMyTeam         	= function: 0x18956ac0 (function)
--              GetDayTimeVisionRange           	= function: 0x18956b78 (function)
--              GetBaseDayTimeVisionRange       	= function: 0x18956c30 (function)
--              SetDayTimeVisionRange           	= function: 0x18956cf0 (function)
--              GetNightTimeVisionRange         	= function: 0x18956da8 (function)
--              GetBaseNightTimeVisionRange     	= function: 0x18956e60 (function)
--              SetNightTimeVisionRange         	= function: 0x18956f20 (function)
--              GetCurrentVisionRange           	= function: 0x18956fd8 (function)
--              SetDeathXP                      	= function: 0x18957090 (function)
--              GetDeathXP                      	= function: 0x18957140 (function)
--              SetMinimumGoldBounty            	= function: 0x189571f0 (function)
--              GetMinimumGoldBounty            	= function: 0x189572a8 (function)
--              SetMaximumGoldBounty            	= function: 0x18957360 (function)
--              GetMaximumGoldBounty            	= function: 0x18957418 (function)
--              GetGoldBounty                   	= function: 0x189574d0 (function)
--              GetTotalPurchasedUpgradeGoldCost	= function: 0x18957580 (function)
--              IsControllableByAnyPlayer       	= function: 0x18957648 (function)
--              IsOwnedByAnyPlayer              	= function: 0x18957708 (function)
--              GetMainControllingPlayer        	= function: 0x189577c0 (function)
--              SetControllableByPlayer         	= function: 0x18959088 (function)
--              GetPlayerOwnerID                	= function: 0x18959140 (function)
--              GetPlayerOwner                  	= function: 0x1895aa00 (function)
--              GetBaseDamageMin                	= function: 0x189535b0 (function)
--              GetBaseDamageMax                	= function: 0x18953668 (function)
--              GetCloneSource                  	= function: 0x189a8d20 (function)
--              SetBaseDamageMax                	= function: 0x189537d8 (function)
--              GetDamageMin                    	= function: 0x18953890 (function)
--              GetDamageMax                    	= function: 0x18953940 (function)
--              GetPhysicalArmorValue           	= function: 0x189539f0 (function)
--              Script_GetMagicalArmorValue     	= function: 0x18953aa8 (function)
--              SetPhysicalArmorBaseValue       	= function: 0x18953b68 (function)
--              GetPhysicalArmorBaseValue       	= function: 0x18953c28 (function)
--              SetBaseMagicalResistanceValue   	= function: 0x18953ce8 (function)
--              GetBaseMagicalResistanceValue   	= function: 0x18953da8 (function)
--              SetBaseManaRegen                	= function: 0x18953e68 (function)
--              GetBonusManaRegen               	= function: 0x18953f20 (function)
--              GetManaRegen                    	= function: 0x18953fd8 (function)
--              SetBaseHealthRegen              	= function: 0x18954088 (function)
--              GetBaseHealthRegen              	= function: 0x189542f0 (function)
--              GetHealthRegen                  	= function: 0x189543a8 (function)
--              SetBaseMoveSpeed                	= function: 0x18954458 (function)
--              GetBaseMoveSpeed                	= function: 0x18954510 (function)
--              SetBaseAttackTime               	= function: 0x189545c8 (function)
--              GetBaseAttackTime               	= function: 0x18954680 (function)
--              GetIncreasedAttackSpeed         	= function: 0x18954738 (function)
--              GetAttacksPerSecond             	= function: 0x189547f0 (function)
--              GetSecondsPerAttack             	= function: 0x189548a8 (function)
--              GetHasteFactor                  	= function: 0x18954960 (function)
--              GetAttackSpeed                  	= function: 0x18954a90 (function)
--              GetDisplayAttackSpeed           	= function: 0x18954b40 (function)
--              GetMoveSpeedModifier            	= function: 0x18954bf8 (function)
--              GetCastRangeBonus               	= function: 0x18954cb0 (function)
--              GetCooldownReduction            	= function: 0x18954d68 (function)
--              IsIllusion                      	= function: 0x18954e20 (function)
--              MakeIllusion                    	= function: 0x189a8f40 (function)
--              IsStrongIllusion                	= function: 0x189a8ff0 (function)
--              IsTempestDouble                 	= function: 0x189a90a8 (function)
--              IsReincarnating                 	= function: 0x189a9158 (function)
--              ClearActivityModifiers          	= function: 0x189a9208 (function)
--              IsNull                          	= function: 0x189a7308 (function)
--              StartGesture                    	= function: 0x189a9378 (function)
--              StartGestureWithFade            	= function: 0x189a9428 (function)
--              StartGestureFadeWithSequenceSettings	= function: 0x189a94e0 (function)
--              StartGestureWithPlaybackRate    	= function: 0x189a95a8 (function)
--              StartGestureWithFadeAndPlaybackRate	= function: 0x189a9668 (function)
--              RemoveGesture                   	= function: 0x189a9730 (function)
--              FadeGesture                     	= function: 0x189a97e0 (function)
--              PlayVCD                         	= function: 0x189a9890 (function)
--              ForcePlayActivityOnce           	= function: 0x189a9910 (function)
--              OnCommandMoveToDirection        	= function: 0x189a99c8 (function)
--              TriggerSpellAbsorb              	= function: 0x189a9a88 (function)
--              TriggerModifierDodge            	= function: 0x189ba100 (function)
--              TriggerSpellReflect             	= function: 0x189ba1b8 (function)
--              SwapAbilities                   	= function: 0x189ba270 (function)
--              UnHideAbilityToSlot             	= function: 0x189ba320 (function)
--              FindAbilityByName               	= function: 0x189ba3d8 (function)
--              GetAbilityByIndex               	= function: 0x189ba490 (function)
--              GetAbilityCount                 	= function: 0x189ba548 (function)
--              SetAbilityByIndex               	= function: 0x189ba5f8 (function)
--              RemoveAbilityFromIndexByName    	= function: 0x189ba6b0 (function)
--              Kill                            	= function: 0x18955df0 (function)
--              CastAbilityOnPosition           	= function: 0x189ba828 (function)
--              CastAbilityOnTarget             	= function: 0x189ba8e0 (function)
--              CastAbilityNoTarget             	= function: 0x189ba998 (function)
--              CastAbilityToggle               	= function: 0x189baa50 (function)
--              CastAbilityImmediately          	= function: 0x189bab08 (function)
--              Hold                            	= function: 0x189bac40 (function)
--              Stop                            	= function: 0x189bacc0 (function)
--              SetCursorPosition               	= function: 0x189bad40 (function)
--              SetCursorTargetingNothing       	= function: 0x189badf8 (function)
--              GetCursorCastTarget             	= function: 0x189baeb8 (function)
--              HasInventory                    	= function: 0x189bb070 (function)
--              SetHasInventory                 	= function: 0x189bb120 (function)
--              GetItemInSlot                   	= function: 0x189bb1d0 (function)
--              IsRooted                        	= function: 0x189bb280 (function)
--              IsDisarmed                      	= function: 0x189bb330 (function)
--              IsAttackImmune                  	= function: 0x189bb3e0 (function)
--              IsSilenced                      	= function: 0x189bb490 (function)
--              IsStunned                       	= function: 0x189bb5c0 (function)
--              SetOrigin                       	= function: 0x189babc0 (function)
--              IsFeared                        	= function: 0x189bb6f0 (function)
--              IsTaunted                       	= function: 0x189bb7a0 (function)
--              IsInvisible                     	= function: 0x189bb850 (function)
--              IsInvulnerable                  	= function: 0x189bb900 (function)
--              IsMagicImmune                   	= function: 0x189bb9b0 (function)
--              IsDebuffImmune                  	= function: 0x189bba60 (function)
--              IsMuted                         	= function: 0x189bb540 (function)
--              ProvidesVision                  	= function: 0x189bbbc0 (function)
--              IsNightmared                    	= function: 0x189bbc70 (function)
--              IsBlockDisabled                 	= function: 0x189bbd20 (function)
--              IsEvadeDisabled                 	= function: 0x189bbdd0 (function)
--              IsUnselectable                  	= function: 0x189bbe80 (function)
--              IsUnableToMiss                  	= function: 0x189bbf30 (function)
--              IsSpeciallyDeniable             	= function: 0x189bbfe0 (function)
--              IsSpeciallyUndeniable           	= function: 0x189bc098 (function)
--              IsCommandRestricted             	= function: 0x189bc150 (function)
--              NotOnMinimap                    	= function: 0x189bc208 (function)
--              NotOnMinimapForEnemies          	= function: 0x189bc2b8 (function)
--              IsLowAttackPriority             	= function: 0x189bc370 (function)
--              NoHealthBar                     	= function: 0x189bc428 (function)
--              NoTeamSelect                    	= function: 0x189bc4d8 (function)
--              PassivesDisabled                	= function: 0x189bc588 (function)
--              SetHealthBarOffsetOverride      	= function: 0x189a73c0 (function)
--              GetBaseHealthBarOffset          	= function: 0x189a74e8 (function)
--              SetNeverMoveToClearSpace        	= function: 0x189a75a0 (function)
--              GetNeverMoveToClearSpace        	= function: 0x189a7750 (function)
--              IsIdle                          	= function: 0x189a7810 (function)
--              GetLastIdleChangeTime           	= function: 0x189a76e8 (function)
--              FaceTowards                     	= function: 0x189a7998 (function)
--              StopFacing                      	= function: 0x189a7660 (function)
--              SpeakConcept                    	= function: 0x189a7bd0 (function)
--              QueueConcept                    	= function: 0x189a7890 (function)
--              QueueTeamConcept                	= function: 0x189a7e08 (function)
--              QueueTeamConceptNoSpectators    	= function: 0x189a7ec0 (function)
--              SetInitialGoalEntity            	= function: 0x189a7f80 (function)
--              GetInitialGoalEntity            	= function: 0x189a8038 (function)
--              SetMustReachEachGoalEntity      	= function: 0x189a80f0 (function)
--              GetMustReachEachGoalEntity      	= function: 0x189a7a48 (function)
--              SetInitialGoalPosition          	= function: 0x189a7b08 (function)
--              GetInitialGoalPosition          	= function: 0x189a7c80 (function)
--              CalculateGenericBonuses         	= function: 0x189a7d38 (function)
--              ChangeTeam                      	= function: 0x189a87c0 (function)
--              GetIdealSpeed                   	= function: 0x189a8870 (function)
--              GetIdealSpeedNoSlows            	= function: 0x189a8920 (function)
--              IsAncient                       	= function: 0x189a8a58 (function)
--              IsBossCreature                  	= function: 0x189a8b08 (function)
--              IsNeutralUnitType               	= function: 0x189a8bb8 (function)
--              IsSummoned                      	= function: 0x189a8c70 (function)
--              IsClone                         	= function: 0x189a8da0 (function)
--              SetFollowRange                  	= function: 0x189a8e20 (function)
--              GetHullRadius                   	= function: 0x189a8ed0 (function)
--              GetCollisionPadding             	= function: 0x189a81b0 (function)
--              GetPaddedCollisionRadius        	= function: 0x189a8268 (function)
--              SetHullRadius                   	= function: 0x189a8328 (function)
--              GetHealthPercent                	= function: 0x189a83d8 (function)
--              GetHealthDeficit                	= function: 0x189a84f8 (function)
--              GetLastDamageTime               	= function: 0x189a85b0 (function)
--              MoveToPosition                  	= function: 0x189a8668 (function)
--              MoveToPositionAggressive        	= function: 0x189a8718 (function)
--              MoveToNPC                       	= function: 0x189a9b90 (function)
--              MoveToTargetToAttack            	= function: 0x189a9c40 (function)
--              PatrolToPosition                	= function: 0x189a9cf8 (function)
--              DropItemAtPosition              	= function: 0x189a9db0 (function)
--              MoveToNPCToGiveItem             	= function: 0x189a9e68 (function)
--              PickupDroppedItem               	= function: 0x189a9f20 (function)
--              PickupRune                      	= function: 0x189a9fd8 (function)
--              SellItem                        	= function: 0x189aa088 (function)
--              DisassembleItem                 	= function: 0x18952a90 (function)
--              EjectItemFromStash              	= function: 0x18952b40 (function)
--              Interrupt                       	= function: 0x18958c28 (function)
--              InterruptChannel                	= function: 0x18958cd8 (function)
--              InterruptMotionControllers      	= function: 0x18958d90 (function)
--              RemoveHorizontalMotionController	= function: 0x18958e50 (function)
--              RemoveVerticalMotionController  	= function: 0x18958f18 (function)
--              IsCurrentlyVerticalMotionControlled	= function: 0x18958fd8 (function)
--              IsCurrentlyHorizontalMotionControlled	= function: 0x18959280 (function)
--              GetRangeToUnit                  	= function: 0x18959348 (function)
--              IsPositionInRange               	= function: 0x189593c8 (function)
--              ShouldIdleAcquire               	= function: 0x18959480 (function)
--              SetIdleAcquire                  	= function: 0x18959538 (function)
--              AddNewModifier                  	= function: 0x189595e8 (function)
--              GetModifierCount                	= function: 0x18959698 (function)
--              GetModifierNameByIndex          	= function: 0x18959750 (function)
--              RemoveModifierByName            	= function: 0x18959808 (function)
--              RemoveAllModifiersOfName        	= function: 0x189598c0 (function)
--              RemoveModifierByNameAndCaster   	= function: 0x18959980 (function)
--              FindModifierByName              	= function: 0x18959a40 (function)
--              FindModifierByNameAndCaster     	= function: 0x18959af8 (function)
--              FindAllModifiers                	= function: 0x18959bb8 (function)
--              FindAllModifiersByName          	= function: 0x18959c70 (function)
--              HasModifier                     	= function: 0x18959d28 (function)
--              GetModifierStackCount           	= function: 0x18959dd8 (function)
--              SetModifierStackCount           	= function: 0x18959e90 (function)
--              DropItemAtPositionImmediate     	= function: 0x18959f48 (function)
--              IsOpposingTeam                  	= function: 0x1895a008 (function)
--              CanBeSeenByAnyOpposingTeam      	= function: 0x1895a0b8 (function)
--              GetOpposingTeamNumber           	= function: 0x1895a178 (function)
--              MakeVisibleToTeam               	= function: 0x1895a230 (function)
--              GetSpellAmplification           	= function: 0x189534c8 (function)
--              GetEvasion                      	= function: 0x18953418 (function)
--              FDesc                           	= table: 0x189a7378 (table)
--              {
--                 SetCustomHealthLabel            	= void SetCustomHealthLabel(string pLabel, int r, int g, int b)
--   (userdata)
--                 SetShouldDoFlyHeightVisual      	= void SetShouldDoFlyHeightVisual(bool bShouldVisuallyFly)
--   (userdata)
--                 SetCursorCastTarget             	= void SetCursorCastTarget(handle hEntity)
--   (userdata)
--                 SetRevealRadius                 	= void SetRevealRadius(float revealRadius)
--  sets the client side map reveal radius for this unit (userdata)
--                 IsMoving                        	= bool IsMoving()
--  Is this unit moving? (userdata)
--                 RemoveAllModifiers              	= void RemoveAllModifiers(int targets, bool bNow, bool bPermanent, bool bDeath)
--  (int targets [0=all, 1=enemy, 2=ally], bool bNow, bool bPermanent, bool bDeath) (userdata)
--                 Purge                           	= void Purge(bool bRemovePositiveBuffs, bool bRemoveDebuffs, bool bFrameOnly, bool bRemoveStuns, bool bRemoveExceptions)
--  (bool RemovePositiveBuffs, bool RemoveDebuffs, bool BuffsCreatedThisFrameOnly, bool RemoveStuns, bool RemoveExceptions) (userdata)
--                 RemoveNoDraw                    	= void RemoveNoDraw()
--  Remove the no draw flag. (userdata)
--                 AddNoDraw                       	= void AddNoDraw()
--  Adds the no draw flag. (userdata)
--                 GetCreationTime                 	= float GetCreationTime()
--   (userdata)
--                 AngerNearbyUnits                	= void AngerNearbyUnits()
--   (userdata)
--                 RespawnUnit                     	= void RespawnUnit()
--  Respawns the target unit if it can be respawned. (userdata)
--                 SetUnitCanRespawn               	= void SetUnitCanRespawn(bool bCanRespawn)
--   (userdata)
--                 UnitCanRespawn                  	= bool UnitCanRespawn()
--   (userdata)
--                 NotifyWearablesOfModelChange    	= void NotifyWearablesOfModelChange(bool bOriginalModel)
--   (userdata)
--                 WasKilledPassively              	= bool WasKilledPassively()
--   (userdata)
--                 GetModelRadius                  	= float GetModelRadius()
--   (userdata)
--                 DestroyAllSpeechBubbles         	= void DestroyAllSpeechBubbles()
--   (userdata)
--                 AddSpeechBubble                 	= void AddSpeechBubble(int iBubble, string pszSpeech, float flDuration, unsigned unOffsetX, unsigned unOffsetY)
--  Add a speech bubble(1-4 live at a time) to this NPC. (userdata)
--                 SetOriginalModel                	= void SetOriginalModel(string pszModelName)
--  Sets the original model of this entity, which it will tend to fall back to anytime its state changes. (userdata)
--                 ManageModelChanges              	= void ManageModelChanges()
--   (userdata)
--                 IsPhantomBlocker                	= bool IsPhantomBlocker()
--   (userdata)
--                 MakePhantomBlocker              	= void MakePhantomBlocker()
--   (userdata)
--                 IsChanneling                    	= bool IsChanneling()
--  Is this unit currently channeling a spell? (userdata)
--                 SetForceAttackTargetAlly        	= void SetForceAttackTargetAlly(handle hNPC)
--   (userdata)
--                 GetLevel                        	= int GetLevel()
--  Returns the level of this unit. (userdata)
--                 HasFlyingVision                 	= bool HasFlyingVision()
--   (userdata)
--                 IsRangedAttacker                	= bool IsRangedAttacker()
--  Is this unit a ranged attacker? (userdata)
--                 GetProjectileSpeed              	= int GetProjectileSpeed()
--   (userdata)
--                 SetRangedProjectileName         	= void SetRangedProjectileName(string pProjectileName)
--   (userdata)
--                 GetRangedProjectileName         	= string GetRangedProjectileName()
--   (userdata)
--                 SetUnitName                     	= void SetUnitName(string pName)
--   (userdata)
--                 GetUnitName                     	= string GetUnitName()
--  Get the name of this unit. (userdata)
--                 GetUnitLabel                    	= string GetUnitLabel()
--   (userdata)
--                 ForceKill                       	= void ForceKill(bool bReincarnate)
--  Kill this unit immediately. (userdata)
--                 AttackReady                     	= bool AttackReady()
--   (userdata)
--                 AttackNoEarlierThan             	= void AttackNoEarlierThan(float flTime, float flTimeDisparityTolerance)
--   (userdata)
--                 TimeUntilNextAttack             	= float TimeUntilNextAttack()
--   (userdata)
--                 GetLastAttackTime               	= float GetLastAttackTime()
--   (userdata)
--                 GetAttackAnimationPoint         	= float GetAttackAnimationPoint()
--   (userdata)
--                 IsAttackingEntity               	= bool IsAttackingEntity(handle hEntity)
--   (userdata)
--                 IsAttacking                     	= bool IsAttacking()
--   (userdata)
--                 SetAttacking                    	= void SetAttacking(handle hAttackTarget)
--   (userdata)
--                 GetAttackTarget                 	= handle GetAttackTarget()
--   (userdata)
--                 GetAggroTarget                  	= handle GetAggroTarget()
--  Returns this unit's aggro target. (userdata)
--                 SetAggroTarget                  	= void SetAggroTarget(handle hAggroTarget)
--  Set this unit's aggro target to a specified unit. (userdata)
--                 AlertNearbyUnits                	= void AlertNearbyUnits(handle hAttacker, handle hAbility)
--   (userdata)
--                 GetAdditionalBattleMusicWeight  	= float GetAdditionalBattleMusicWeight()
--  Combat involving this creature will have this weight added to the music calcuations. (userdata)
--                 SetAdditionalBattleMusicWeight  	= void SetAdditionalBattleMusicWeight(float flWeight)
--  Combat involving this creature will have this weight added to the music calcuations. (userdata)
--                 GetForceAttackTarget            	= handle GetForceAttackTarget()
--   (userdata)
--                 SetForceAttackTarget            	= void SetForceAttackTarget(handle hNPC)
--   (userdata)
--                 MakeVisibleDueToAttack          	= void MakeVisibleDueToAttack(int iTeam, float flRadius)
--   (userdata)
--                 BoundingRadius2D                	= float BoundingRadius2D()
--   (userdata)
--                 RemoveItem                      	= void RemoveItem(handle hItem)
--  Removes the passed item from this unit's inventory and deletes it. (userdata)
--                 TakeItem                        	= handle TakeItem(handle hItem)
--  Removed the passed item from this unit's inventory. (userdata)
--                 SetCanSellItems                 	= void SetCanSellItems(bool bCanSell)
--  Set whether or not this unit is allowed to sell items (bCanSellItems) (userdata)
--                 CanSellItems                    	= bool CanSellItems()
--  Query if this unit can sell items. (userdata)
--                 AddItemByName                   	= handle AddItemByName(string pszItemName)
--  Add an item to this unit's inventory. (userdata)
--                 AddItem                         	= handle AddItem(handle hItem)
--  Add an item to this unit's inventory. (userdata)
--                 AddAbility                      	= handle AddAbility(string pszAbilityName)
--  Add an ability to this unit by name. (userdata)
--                 SwapItems                       	= void SwapItems(int nSlot1, int nSlot2)
--  Swap the contents of two item slots (slot1, slot2) (userdata)
--                 RemoveAbility                   	= void RemoveAbility(string pszAbilityName)
--  Remove an ability from this unit by name. (userdata)
--                 HasAbility                      	= bool HasAbility(string pszAbilityName)
--  See whether this unit has an ability by name. (userdata)
--                 RemoveAbilityByHandle           	= void RemoveAbilityByHandle(handle hAbility)
--  Remove the passed ability from this unit. (userdata)
--                 GetStatusResistance             	= float GetStatusResistance()
--   (userdata)
--                 GetCursorPosition               	= Vector GetCursorPosition()
--   (userdata)
--                 GetCursorTargetingNothing       	= bool GetCursorTargetingNothing()
--   (userdata)
--                 IsInRangeOfShop                 	= bool IsInRangeOfShop(int nShopType, bool bPhysical)
--  Ask whether this unit is in range of the specified shop ( DOTA_SHOP_TYPE shop, bool bMustBePhysicallyNear (userdata)
--                 SetBaseMaxHealth                	= void SetBaseMaxHealth(float flBaseMaxHealth)
--  Set a new base max health value. (userdata)
--                 GetBaseMaxHealth                	= float GetBaseMaxHealth()
--  Gets the base max health value. (userdata)
--                 ModifyHealth                    	= void ModifyHealth(int iDesiredHealthValue, handle hAbility, bool bLethal, int iAdditionalFlags)
--  Sets the health to a specific value, with optional flags or inflictors. (userdata)
--                 SetMana                         	= void SetMana(float flMana)
--  Set the mana on this unit. (userdata)
--                 SetMaxMana                      	= void SetMaxMana(float flMaxMana)
--  Set the maximum mana of this unit. (userdata)
--                 GetMana                         	= float GetMana()
--  Get the mana on this unit. (userdata)
--                 GetMaxMana                      	= float GetMaxMana()
--  Get the maximum mana of this unit. (userdata)
--                 GetManaPercent                  	= int GetManaPercent()
--  Get the percent of mana remaining. (userdata)
--                 Script_ReduceMana               	= float Script_ReduceMana(float flMana, handle hAbility)
--  Remove mana from this unit, this can be used for involuntary mana loss, not for mana that is spent. (userdata)
--                 GiveMana                        	= void GiveMana(float flMana)
--  Give mana to this unit, this can be used for mana gained by abilities or item usage. (userdata)
--                 SpendMana                       	= void SpendMana(float flManaSpent, handle hAbility)
--  Spend mana from this unit, this can be used for spending mana from abilities or item usage. (userdata)
--                 Heal                            	= void Heal(float flAmount, handle hInflictor)
--  Heal this unit. (userdata)
--                 HealWithParams                  	= void HealWithParams(float flAmount, handle hInflictor, bool bLifesteal, bool bAmplify, handle hSource, bool bSpellLifesteal)
--  Heal this unit (with more parameters) (userdata)
--                 GetAcquisitionRange             	= float GetAcquisitionRange()
--  Gets the range at which this unit will auto-acquire. (userdata)
--                 SetAcquisitionRange             	= void SetAcquisitionRange(int nRange)
--   (userdata)
--                 Script_GetAttackRange           	= float Script_GetAttackRange()
--  Gets this unit's attack range after all modifiers. (userdata)
--                 GetAttackRangeBuffer            	= float GetAttackRangeBuffer()
--  Gets the attack range buffer. (userdata)
--                 GetBaseAttackRange              	= int GetBaseAttackRange()
--   (userdata)
--                 GetAttackDamage                 	= int GetAttackDamage()
--  Returns a random integer between the minimum and maximum base damage of the unit. (userdata)
--                 GetAverageTrueAttackDamage      	= int GetAverageTrueAttackDamage(handle hTarget)
--  Returns the average value of the minimum and maximum damage values. (userdata)
--                 SetShouldComputeRemainingPathLength	= void SetShouldComputeRemainingPathLength(bool bCompute)
--   (userdata)
--                 GetRemainingPathLength          	= float GetRemainingPathLength()
--   (userdata)
--                 PerformAttack                   	= void PerformAttack(handle hTarget, bool bUseCastAttackOrb, bool bProcessProcs, bool bSkipCooldown, bool bIgnoreInvis, bool bUseProjectile, bool bFakeAttack, bool bNeverMiss)
--  Performs an attack on a target. (userdata)
--                 IsHero                          	= bool IsHero()
--  Is this a hero or hero illusion? (userdata)
--                 IsRealHero                      	= bool IsRealHero()
--  Is this a real hero? (userdata)
--                 IsConsideredHero                	= bool IsConsideredHero()
--  Is this unit a considered a hero for targeting purposes? (userdata)
--                 IsCreepHero                     	= bool IsCreepHero()
--  Is this unit a creep hero? (userdata)
--                 IsOther                         	= bool IsOther()
--  Is this unit a ward-type unit? (userdata)
--                 IsTower                         	= bool IsTower()
--  Is this a tower? (userdata)
--                 IsBuilding                      	= bool IsBuilding()
--  Is this unit a building? (userdata)
--                 IsFort                          	= bool IsFort()
--  Is this unit an Ancient? (userdata)
--                 IsBarracks                      	= bool IsBarracks()
--  Is this unit a Barracks? (userdata)
--                 IsCreep                         	= bool IsCreep()
--  Is this unit a creep? (userdata)
--                 IsCourier                       	= bool IsCourier()
--  Is this unit a courier? (userdata)
--                 IsBoss                          	= bool IsBoss()
--  Is this unit a boss? (userdata)
--                 IsCreature                      	= bool IsCreature()
--  Is this a Creature type NPC? (userdata)
--                 IsWard                          	= bool IsWard()
--  Is this a Ward? (userdata)
--                 IsHeroWard                      	= bool IsHeroWard()
--  Is this a Hero Ward? (userdata)
--                 IsShrine                        	= bool IsShrine()
--  Is this a shrine? (userdata)
--                 IsPhantom                       	= bool IsPhantom()
--  Is this a phantom unit? (userdata)
--                 IsZombie                        	= bool IsZombie()
--  Is this entity an Undying Zombie? (userdata)
--                 GetNeutralSpawnerName           	= string GetNeutralSpawnerName()
--  Get the name of this camp's neutral spawner. (userdata)
--                 CanEntityBeSeenByMyTeam         	= bool CanEntityBeSeenByMyTeam(handle hEntity)
--  Check FoW to see if an entity is visible. (userdata)
--                 GetDayTimeVisionRange           	= int GetDayTimeVisionRange()
--  Returns the vision range after modifiers. (userdata)
--                 GetBaseDayTimeVisionRange       	= int GetBaseDayTimeVisionRange()
--  Returns the vision range before modifiers. (userdata)
--                 SetDayTimeVisionRange           	= void SetDayTimeVisionRange(int iRange)
--  Set the base vision range. (userdata)
--                 GetNightTimeVisionRange         	= int GetNightTimeVisionRange()
--  Returns the vision range after modifiers. (userdata)
--                 GetBaseNightTimeVisionRange     	= int GetBaseNightTimeVisionRange()
--  Returns the vision range after modifiers. (userdata)
--                 SetNightTimeVisionRange         	= void SetNightTimeVisionRange(int iRange)
--  Returns the vision range after modifiers. (userdata)
--                 GetCurrentVisionRange           	= int GetCurrentVisionRange()
--  Gets the current vision range. (userdata)
--                 SetDeathXP                      	= void SetDeathXP(int iXPBounty)
--  Set the XP bounty on this unit. (userdata)
--                 GetDeathXP                      	= int GetDeathXP()
--  Get the XP bounty on this unit. (userdata)
--                 SetMinimumGoldBounty            	= void SetMinimumGoldBounty(int iGoldBountyMin)
--  Set the minimum gold bounty for this unit. (userdata)
--                 GetMinimumGoldBounty            	= int GetMinimumGoldBounty()
--  Get the minimum gold bounty for this unit. (userdata)
--                 SetMaximumGoldBounty            	= void SetMaximumGoldBounty(int iGoldBountyMax)
--  Set the maximum gold bounty for this unit. (userdata)
--                 GetMaximumGoldBounty            	= int GetMaximumGoldBounty()
--  Get the maximum gold bounty for this unit. (userdata)
--                 GetGoldBounty                   	= int GetGoldBounty()
--  Get the gold bounty on this unit. (userdata)
--                 GetTotalPurchasedUpgradeGoldCost	= int GetTotalPurchasedUpgradeGoldCost()
--  Get how much gold has been spent on ability upgrades. (userdata)
--                 IsControllableByAnyPlayer       	= bool IsControllableByAnyPlayer()
--  Is this unit controlled by any non-bot player? (userdata)
--                 IsOwnedByAnyPlayer              	= bool IsOwnedByAnyPlayer()
--  Is this unit owned by any non-bot player? (userdata)
--                 GetMainControllingPlayer        	= int GetMainControllingPlayer()
--  Returns the player ID of the controlling player. (userdata)
--                 SetControllableByPlayer         	= void SetControllableByPlayer(int nPlayerID, bool bSkipAdjustingPosition)
--  Set this unit controllable by the player with the passed ID. (userdata)
--                 GetPlayerOwnerID                	= int GetPlayerOwnerID()
--  Get the owner player ID for this unit. (userdata)
--                 GetPlayerOwner                  	= handle GetPlayerOwner()
--  Returns the player that owns this unit. (userdata)
--                 GetBaseDamageMin                	= int GetBaseDamageMin()
--  Get the minimum attack damage of this unit. (userdata)
--                 GetBaseDamageMax                	= int GetBaseDamageMax()
--  Get the maximum attack damage of this unit. (userdata)
--                 GetCloneSource                  	= handle GetCloneSource()
--  Get clone source (Meepo Prime, if this is a Meepo) (userdata)
--                 SetBaseDamageMax                	= void SetBaseDamageMax(int nMax)
--  Sets the maximum base damage. (userdata)
--                 GetDamageMin                    	= int GetDamageMin()
--  Get the minimum attack damage of this unit. (userdata)
--                 GetDamageMax                    	= int GetDamageMax()
--  Get the maximum attack damage of this unit. (userdata)
--                 GetPhysicalArmorValue           	= float GetPhysicalArmorValue(bool bIgnoreBase)
--  Returns current physical armor value. (userdata)
--                 Script_GetMagicalArmorValue     	= float Script_GetMagicalArmorValue(bool bUseExperimentalFormula, handle inflictor)
--  Returns current magical armor value. (userdata)
--                 SetPhysicalArmorBaseValue       	= void SetPhysicalArmorBaseValue(float flPhysicalArmorValue)
--  Sets base physical armor value. (userdata)
--                 GetPhysicalArmorBaseValue       	= float GetPhysicalArmorBaseValue()
--  Returns base physical armor value. (userdata)
--                 SetBaseMagicalResistanceValue   	= void SetBaseMagicalResistanceValue(float flMagicalResistanceValue)
--  Sets base magical armor value. (userdata)
--                 GetBaseMagicalResistanceValue   	= float GetBaseMagicalResistanceValue()
--  Returns base magical armor value. (userdata)
--                 SetBaseManaRegen                	= void SetBaseManaRegen(float flManaRegen)
--   (userdata)
--                 GetBonusManaRegen               	= float GetBonusManaRegen()
--  This Mana regen is derived from constant bonuses like Basilius. (userdata)
--                 GetManaRegen                    	= float GetManaRegen()
--   (userdata)
--                 SetBaseHealthRegen              	= void SetBaseHealthRegen(float flHealthRegen)
--   (userdata)
--                 GetBaseHealthRegen              	= float GetBaseHealthRegen()
--   (userdata)
--                 GetHealthRegen                  	= float GetHealthRegen()
--   (userdata)
--                 SetBaseMoveSpeed                	= void SetBaseMoveSpeed(int iMoveSpeed)
--   (userdata)
--                 GetBaseMoveSpeed                	= float GetBaseMoveSpeed()
--   (userdata)
--                 SetBaseAttackTime               	= void SetBaseAttackTime(float flBaseAttackTime)
--   (userdata)
--                 GetBaseAttackTime               	= float GetBaseAttackTime()
--   (userdata)
--                 GetIncreasedAttackSpeed         	= float GetIncreasedAttackSpeed()
--   (userdata)
--                 GetAttacksPerSecond             	= float GetAttacksPerSecond()
--   (userdata)
--                 GetSecondsPerAttack             	= float GetSecondsPerAttack()
--   (userdata)
--                 GetHasteFactor                  	= float GetHasteFactor()
--   (userdata)
--                 GetAttackSpeed                  	= float GetAttackSpeed()
--   (userdata)
--                 GetDisplayAttackSpeed           	= float GetDisplayAttackSpeed()
--  Attack speed expressed as constant value (userdata)
--                 GetMoveSpeedModifier            	= float GetMoveSpeedModifier(float flBaseSpeed, bool bReturnUnslowed)
--   (userdata)
--                 GetCastRangeBonus               	= float GetCastRangeBonus()
--   (userdata)
--                 GetCooldownReduction            	= float GetCooldownReduction()
--   (userdata)
--                 IsIllusion                      	= bool IsIllusion()
--   (userdata)
--                 MakeIllusion                    	= void MakeIllusion()
--   (userdata)
--                 IsStrongIllusion                	= bool IsStrongIllusion()
--   (userdata)
--                 IsTempestDouble                 	= bool IsTempestDouble()
--   (userdata)
--                 IsReincarnating                 	= bool IsReincarnating()
--   (userdata)
--                 ClearActivityModifiers          	= void ClearActivityModifiers()
--  Clear Activity modifiers (userdata)
--                 AddActivityModifier             	= void AddActivityModifier(string szName)
--  Add an activity modifier that affects future StartGesture calls (userdata)
--                 StartGesture                    	= void StartGesture(int nActivity)
--  Add the given gesture activity. (userdata)
--                 StartGestureWithFade            	= void StartGestureWithFade(int nActivity, float fFadeIn, float fFadeOut)
--  Add the given gesture activity faded according to to the parameters. (userdata)
--                 StartGestureFadeWithSequenceSettings	= void StartGestureFadeWithSequenceSettings(int nActivity)
--  Add the given gesture activity faded according to its sequence settings. (userdata)
--                 StartGestureWithPlaybackRate    	= void StartGestureWithPlaybackRate(int nActivity, float flRate)
--  Add the given gesture activity with a playback rate override. (userdata)
--                 StartGestureWithFadeAndPlaybackRate	= void StartGestureWithFadeAndPlaybackRate(int nActivity, float fFadeIn, float fFadeOut, float flRate)
--  Add the given gesture activity faded according to to the parameters and with a playback rate override. (userdata)
--                 RemoveGesture                   	= void RemoveGesture(int nActivity)
--  Remove the given gesture activity. (userdata)
--                 FadeGesture                     	= void FadeGesture(int nActivity)
--  Fade and remove the given gesture activity. (userdata)
--                 PlayVCD                         	= void PlayVCD(string pVCD)
--  Play a VCD on the NPC. (userdata)
--                 ForcePlayActivityOnce           	= void ForcePlayActivityOnce(int nActivity)
--  Play an activity once, and then go back to idle. (userdata)
--                 OnCommandMoveToDirection        	= void OnCommandMoveToDirection(Vector pos)
--  Tells the underlying AI to move in the given direction, skipping Dota orders (userdata)
--                 TriggerSpellAbsorb              	= bool TriggerSpellAbsorb(handle hAbility)
--   (userdata)
--                 TriggerModifierDodge            	= bool TriggerModifierDodge()
--   (userdata)
--                 TriggerSpellReflect             	= void TriggerSpellReflect(handle hAbility)
--  Trigger the Lotus Orb-like effect.(hAbility) (userdata)
--                 SwapAbilities                   	= void SwapAbilities(string pAbilityName1, string pAbilityName2, bool bEnable1, bool bEnable2)
--  Swaps the slots of the two passed abilities and sets them enabled/disabled. (userdata)
--                 UnHideAbilityToSlot             	= void UnHideAbilityToSlot(string pszAbilityName, string pszReplacedAbilityName)
--  Makes the first ability unhidden, and puts it where second ability currently is. Will do nothing if the first ability is already unhidden and in a valid slot. (userdata)
--                 FindAbilityByName               	= handle FindAbilityByName(string pAbilityName)
--  Retrieve an ability by name from the unit. (userdata)
--                 GetAbilityByIndex               	= handle GetAbilityByIndex(int iIndex)
--  Retrieve an ability by index from the unit. (userdata)
--                 GetAbilityCount                 	= int GetAbilityCount()
--   (userdata)
--                 SetAbilityByIndex               	= void SetAbilityByIndex(handle hAbility, int iIndex)
--  Set the ability by index. (userdata)
--                 RemoveAbilityFromIndexByName    	= void RemoveAbilityFromIndexByName(string pszAbilityName)
--   (userdata)
--                 Kill                            	= void Kill(handle hAbility, handle hAttacker)
--  Kills this NPC, with the params Ability and Attacker. (userdata)
--                 CastAbilityOnPosition           	= void CastAbilityOnPosition(Vector vPosition, handle hAbility, int iPlayerIndex)
--  Cast an ability on a position. (userdata)
--                 CastAbilityOnTarget             	= void CastAbilityOnTarget(handle hTarget, handle hAbility, int iPlayerIndex)
--  Cast an ability on a target entity. (userdata)
--                 CastAbilityNoTarget             	= void CastAbilityNoTarget(handle hAbility, int iPlayerIndex)
--  Cast an ability with no target. (userdata)
--                 CastAbilityToggle               	= void CastAbilityToggle(handle hAbility, int iPlayerIndex)
--  Toggle an ability. (userdata)
--                 CastAbilityImmediately          	= void CastAbilityImmediately(handle hAbility, int iPlayerIndex)
--  Cast an ability immediately. (userdata)
--                 Hold                            	= void Hold()
--  Hold position. (userdata)
--                 Stop                            	= void Stop()
--  Stop the current order. (userdata)
--                 SetCursorPosition               	= void SetCursorPosition(Vector vLocation)
--   (userdata)
--                 SetCursorTargetingNothing       	= void SetCursorTargetingNothing(bool bTargetingNothing)
--   (userdata)
--                 GetCursorCastTarget             	= handle GetCursorCastTarget()
--   (userdata)
--                 HasInventory                    	= bool HasInventory()
--  Does this unit have an inventory. (userdata)
--                 SetHasInventory                 	= void SetHasInventory(bool bHasInventory)
--  Set if this unit has an inventory. (userdata)
--                 GetItemInSlot                   	= handle GetItemInSlot(int i)
--  Returns nth item in inventory slot (index is zero based). (userdata)
--                 IsRooted                        	= bool IsRooted()
--   (userdata)
--                 IsDisarmed                      	= bool IsDisarmed()
--   (userdata)
--                 IsAttackImmune                  	= bool IsAttackImmune()
--   (userdata)
--                 IsSilenced                      	= bool IsSilenced()
--   (userdata)
--                 IsStunned                       	= bool IsStunned()
--   (userdata)
--                 SetOrigin                       	= void SetOrigin(Vector vLocation)
--  Set the unit's origin. (userdata)
--                 IsFeared                        	= bool IsFeared()
--   (userdata)
--                 IsTaunted                       	= bool IsTaunted()
--   (userdata)
--                 IsInvisible                     	= bool IsInvisible()
--   (userdata)
--                 IsInvulnerable                  	= bool IsInvulnerable()
--   (userdata)
--                 IsMagicImmune                   	= bool IsMagicImmune()
--   (userdata)
--                 IsDebuffImmune                  	= bool IsDebuffImmune()
--   (userdata)
--                 IsMuted                         	= bool IsMuted()
--   (userdata)
--                 ProvidesVision                  	= bool ProvidesVision()
--   (userdata)
--                 IsNightmared                    	= bool IsNightmared()
--   (userdata)
--                 IsBlockDisabled                 	= bool IsBlockDisabled()
--   (userdata)
--                 IsEvadeDisabled                 	= bool IsEvadeDisabled()
--   (userdata)
--                 IsUnselectable                  	= bool IsUnselectable()
--   (userdata)
--                 IsUnableToMiss                  	= bool IsUnableToMiss()
--   (userdata)
--                 IsSpeciallyDeniable             	= bool IsSpeciallyDeniable()
--   (userdata)
--                 IsSpeciallyUndeniable           	= bool IsSpeciallyUndeniable()
--   (userdata)
--                 IsCommandRestricted             	= bool IsCommandRestricted()
--   (userdata)
--                 NotOnMinimap                    	= bool NotOnMinimap()
--   (userdata)
--                 NotOnMinimapForEnemies          	= bool NotOnMinimapForEnemies()
--   (userdata)
--                 IsLowAttackPriority             	= bool IsLowAttackPriority()
--   (userdata)
--                 NoHealthBar                     	= bool NoHealthBar()
--   (userdata)
--                 NoTeamSelect                    	= bool NoTeamSelect()
--   (userdata)
--                 PassivesDisabled                	= bool PassivesDisabled()
--   (userdata)
--                 SetHealthBarOffsetOverride      	= void SetHealthBarOffsetOverride(int nOffset)
--   (userdata)
--                 GetBaseHealthBarOffset          	= int GetBaseHealthBarOffset()
--   (userdata)
--                 SetNeverMoveToClearSpace        	= void SetNeverMoveToClearSpace(bool neverMoveToClearSpace)
--  If set to true, we will never attempt to move this unit to clear space, even when it unphases. (userdata)
--                 GetNeverMoveToClearSpace        	= bool GetNeverMoveToClearSpace()
--  If set to true, we will never attempt to move this unit to clear space, even when it unphases. (userdata)
--                 IsIdle                          	= bool IsIdle()
--  Is this creature currently idle? (userdata)
--                 GetLastIdleChangeTime           	= float GetLastIdleChangeTime()
--  Get the last game time that this unit switched to/from idle state. (userdata)
--                 FaceTowards                     	= void FaceTowards(Vector vTarget)
--  This unit will be set to face the target point. (userdata)
--                 StopFacing                      	= void StopFacing()
--   (userdata)
--                 SpeakConcept                    	= void SpeakConcept(handle hCriteriaTable)
--  Speak a response system concept with the TLK_DOTA_CUSTOM concept. (userdata)
--                 QueueConcept                    	= void QueueConcept(float flDelay, handle hCriteriaTable, handle hCompletionCallbackFn, handle hContext, handle hCallbackInfo)
--  Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay. (userdata)
--                 QueueTeamConcept                	= void QueueTeamConcept(float flDelay, handle hCriteriaTable, handle hCompletionCallbackFn, handle hContext, handle hCallbackInfo)
--  Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay, for the same team this speaker is on. (userdata)
--                 QueueTeamConceptNoSpectators    	= void QueueTeamConceptNoSpectators(float flDelay, handle hCriteriaTable, handle hCompletionCallbackFn, handle hContext, handle hCallbackInfo)
--  Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay, for the same team this speaker is on. Is not played for spectators. (userdata)
--                 SetInitialGoalEntity            	= void SetInitialGoalEntity(handle hGoal)
--  Sets the initial waypoint goal for this NPC. (userdata)
--                 GetInitialGoalEntity            	= handle GetInitialGoalEntity()
--  Returns the initial waypoint goal for this NPC. (userdata)
--                 SetMustReachEachGoalEntity      	= void SetMustReachEachGoalEntity(bool must)
--  Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path. (userdata)
--                 GetMustReachEachGoalEntity      	= bool GetMustReachEachGoalEntity()
--  Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path. (userdata)
--                 SetInitialGoalPosition          	= void SetInitialGoalPosition(Vector vPosition)
--  Set waypoint position for this NPC. (userdata)
--                 GetInitialGoalPosition          	= Vector GetInitialGoalPosition()
--  Get waypoint position for this NPC. (userdata)
--                 CalculateGenericBonuses         	= void CalculateGenericBonuses()
--   (userdata)
--                 ChangeTeam                      	= void ChangeTeam(int iTeamNum)
--   (userdata)
--                 GetIdealSpeed                   	= float GetIdealSpeed()
--  Returns speed after all modifiers. (userdata)
--                 GetIdealSpeedNoSlows            	= float GetIdealSpeedNoSlows()
--  Returns speed after all modifiers, but excluding those that reduce speed. (userdata)
--                 IsAncient                       	= bool IsAncient()
--  Is this unit an Ancient? (userdata)
--                 IsBossCreature                  	= bool IsBossCreature()
--  Is this unit a Boss Creature? (used by custom games) (userdata)
--                 IsNeutralUnitType               	= bool IsNeutralUnitType()
--  Is this a neutral? (userdata)
--                 IsSummoned                      	= bool IsSummoned()
--  Is this unit summoned? (userdata)
--                 IsClone                         	= bool IsClone()
--  Is this unit a clone? (Meepo) (userdata)
--                 SetFollowRange                  	= void SetFollowRange(float flFollowRange)
--   (userdata)
--                 GetHullRadius                   	= float GetHullRadius()
--  Get the collision hull radius of this NPC. (userdata)
--                 GetCollisionPadding             	= float GetCollisionPadding()
--  Returns the size of the collision padding around the hull. (userdata)
--                 GetPaddedCollisionRadius        	= float GetPaddedCollisionRadius()
--  Get the collision hull radius (including padding) of this NPC. (userdata)
--                 SetHullRadius                   	= void SetHullRadius(float flHullRadius)
--  Set the collision hull radius of this NPC. (userdata)
--                 GetHealthPercent                	= int GetHealthPercent()
--  Get the current health percent of the unit. (userdata)
--                 GetHealthDeficit                	= int GetHealthDeficit()
--  Returns integer amount of health missing from max. (userdata)
--                 GetLastDamageTime               	= float GetLastDamageTime()
--  Get the last time this NPC took damage (userdata)
--                 MoveToPosition                  	= void MoveToPosition(Vector vDest)
--  Issue a Move-To command. (userdata)
--                 MoveToPositionAggressive        	= void MoveToPositionAggressive(Vector vDest)
--  Issue an Attack-Move-To command. (userdata)
--                 MoveToNPC                       	= void MoveToNPC(handle hNPC)
--  Move to follow a unit. (userdata)
--                 MoveToTargetToAttack            	= void MoveToTargetToAttack(handle hTarget)
--  Move to a target to attack. (userdata)
--                 PatrolToPosition                	= void PatrolToPosition(Vector vDest)
--  Issue a Patrol-To command. (userdata)
--                 DropItemAtPosition              	= void DropItemAtPosition(Vector vDest, handle hItem)
--  Drop an item at a given point. (userdata)
--                 MoveToNPCToGiveItem             	= void MoveToNPCToGiveItem(handle hNPC, handle hItem)
--  Give an item to another unit. (userdata)
--                 PickupDroppedItem               	= void PickupDroppedItem(handle hItem)
--  Pick up a dropped item. (userdata)
--                 PickupRune                      	= void PickupRune(handle hItem)
--  Pick up a rune. (userdata)
--                 SellItem                        	= void SellItem(handle hItem)
--  Sells the passed item in this unit's inventory. (userdata)
--                 DisassembleItem                 	= void DisassembleItem(handle hItem)
--  Disassemble the passed item in this unit's inventory. (userdata)
--                 EjectItemFromStash              	= void EjectItemFromStash(handle hItem)
--  Drops the selected item out of this unit's stash. (userdata)
--                 Interrupt                       	= void Interrupt()
--   (userdata)
--                 InterruptChannel                	= void InterruptChannel()
--   (userdata)
--                 InterruptMotionControllers      	= void InterruptMotionControllers(bool bFindClearSpace)
--   (userdata)
--                 RemoveHorizontalMotionController	= void RemoveHorizontalMotionController(handle hBuff)
--   (userdata)
--                 RemoveVerticalMotionController  	= void RemoveVerticalMotionController(handle hBuff)
--   (userdata)
--                 IsCurrentlyVerticalMotionControlled	= bool IsCurrentlyVerticalMotionControlled()
--   (userdata)
--                 IsCurrentlyHorizontalMotionControlled	= bool IsCurrentlyHorizontalMotionControlled()
--   (userdata)
--                 GetRangeToUnit                  	= float GetRangeToUnit(handle hNPC)
--   (userdata)
--                 IsPositionInRange               	= bool IsPositionInRange(Vector vPosition, float flRange)
--   (userdata)
--                 ShouldIdleAcquire               	= bool ShouldIdleAcquire()
--   (userdata)
--                 SetIdleAcquire                  	= void SetIdleAcquire(bool bIdleAcquire)
--   (userdata)
--                 AddNewModifier                  	= handle AddNewModifier(handle hCaster, handle hAbility, string pszScriptName, handle hModifierTable)
--  Add a modifier to this unit. (userdata)
--                 GetModifierCount                	= int GetModifierCount()
--  How many modifiers does this unit have? (userdata)
--                 GetModifierNameByIndex          	= string GetModifierNameByIndex(int nIndex)
--  Get a modifier name by index. (userdata)
--                 RemoveModifierByName            	= void RemoveModifierByName(string pszScriptName)
--  Removes a modifier. (userdata)
--                 RemoveAllModifiersOfName        	= void RemoveAllModifiersOfName(string pszScriptName)
--  Removes all copies of a modifier. (userdata)
--                 RemoveModifierByNameAndCaster   	= void RemoveModifierByNameAndCaster(string pszScriptName, handle hCaster)
--  Removes a modifier that was cast by the given caster. (userdata)
--                 FindModifierByName              	= handle FindModifierByName(string pszScriptName)
--  Return a handle to the modifier of the given name if found, else nil (string Name ) (userdata)
--                 FindModifierByNameAndCaster     	= handle FindModifierByNameAndCaster(string pszScriptName, handle hCaster)
--  Return a handle to the modifier of the given name from the passed caster if found, else nil ( string Name, hCaster ) (userdata)
--                 FindAllModifiers                	= table FindAllModifiers()
--  Returns a table of all of the modifiers on the NPC. (userdata)
--                 FindAllModifiersByName          	= table FindAllModifiersByName(string pszScriptName)
--  Returns a table of all of the modifiers on the NPC with the passed name (modifierName) (userdata)
--                 HasModifier                     	= bool HasModifier(string pszScriptName)
--  Sees if this unit has a given modifier. (userdata)
--                 GetModifierStackCount           	= int GetModifierStackCount(string pszScriptName, handle hCaster)
--  Gets the stack count of a given modifier. (userdata)
--                 SetModifierStackCount           	= void SetModifierStackCount(string pszScriptName, handle hCaster, int nStackCount)
--  Sets the stack count of a given modifier. (userdata)
--                 DropItemAtPositionImmediate     	= void DropItemAtPositionImmediate(handle hItem, Vector vPosition)
--  Immediately drop a carried item at a given position. (userdata)
--                 IsOpposingTeam                  	= bool IsOpposingTeam(int nTeam)
--   (userdata)
--                 CanBeSeenByAnyOpposingTeam      	= bool CanBeSeenByAnyOpposingTeam()
--   (userdata)
--                 GetOpposingTeamNumber           	= int GetOpposingTeamNumber()
--   (userdata)
--                 MakeVisibleToTeam               	= void MakeVisibleToTeam(int iTeam, float flDuration)
--   (userdata)
--                 GetSpellAmplification           	= float GetSpellAmplification(bool bBaseOnly)
--   (userdata)
--                 GetEvasion                      	= float GetEvasion()
--   (userdata)
--                 IsAlive                         	= bool IsAlive()
--  Is this unit alive? (userdata)
--                 SetBaseDamageMin                	= void SetBaseDamageMin(int nMin)
--  Sets the minimum base damage. (userdata)
--                 GetCastPoint                    	= float GetCastPoint(bool bAttack)
--   (userdata)
--                 GetCurrentActiveAbility         	= handle GetCurrentActiveAbility()
--  Get the ability this unit is currently casting. (userdata)
--                 IsHexed                         	= bool IsHexed()
--   (userdata)
--                 NoUnitCollision                 	= bool NoUnitCollision()
--   (userdata)
--                 IsDominated                     	= bool IsDominated()
--   (userdata)
--                 IsBlind                         	= bool IsBlind()
--   (userdata)
--                 IsOutOfGame                     	= bool IsOutOfGame()
--   (userdata)
--                 IsUntargetableFrom              	= bool IsUntargetableFrom(handle pTargettingSource)
--   (userdata)
--                 IsFrozen                        	= bool IsFrozen()
--   (userdata)
--                 NoTeamMoveTo                    	= bool NoTeamMoveTo()
--   (userdata)
--                 IsPhased                        	= bool IsPhased()
--   (userdata)
--                 Script_IsDeniable               	= bool Script_IsDeniable()
--   (userdata)
--                 IsMovementImpaired              	= bool IsMovementImpaired()
--   (userdata)
--                 HasItemInInventory              	= bool HasItemInInventory(string pItemName)
--  See whether this unit has an item by name. (userdata)
--                 FindItemInInventory             	= handle FindItemInInventory(string pszItemName)
--  Get handle to first item in inventory, else nil. (userdata)
--                 HasScepter                      	= bool HasScepter()
--   (userdata)
--                 SetStolenScepter                	= void SetStolenScepter(bool bStolenScepter)
--   (userdata)
--                 GetAttackCapability             	= int GetAttackCapability()
--   (userdata)
--                 SetAttackCapability             	= void SetAttackCapability(int iAttackCapabilities)
--   (userdata)
--                 SetMoveCapability               	= void SetMoveCapability(int iMoveCapabilities)
--   (userdata)
--                 HasGroundMovementCapability     	= bool HasGroundMovementCapability()
--   (userdata)
--                 HasFlyMovementCapability        	= bool HasFlyMovementCapability()
--   (userdata)
--                 HasMovementCapability           	= bool HasMovementCapability()
--   (userdata)
--                 HasAttackCapability             	= bool HasAttackCapability()
--   (userdata)
--                 HasAnyActiveAbilities           	= bool HasAnyActiveAbilities()
--   (userdata)
--              }
--              IsAlive                         	= function: 0x18956a40 (function)
--              SetBaseDamageMin                	= function: 0x18953720 (function)
--              GetCastPoint                    	= function: 0x18954a10 (function)
--              AddActivityModifier             	= function: 0x189a92c0 (function)
--              GetCurrentActiveAbility         	= function: 0x189ba770 (function)
--              IsHexed                         	= function: 0x189bb670 (function)
--              NoUnitCollision                 	= function: 0x189bbb10 (function)
--              IsDominated                     	= function: 0x189bc640 (function)
--              IsBlind                         	= function: 0x189bc6f0 (function)
--              IsOutOfGame                     	= function: 0x189bc770 (function)
--              IsUntargetableFrom              	= function: 0x189bc820 (function)
--              IsFrozen                        	= function: 0x189bc8d8 (function)
--              NoTeamMoveTo                    	= function: 0x189bc988 (function)
--              IsPhased                        	= function: 0x189bca38 (function)
--              Script_IsDeniable               	= function: 0x189bcae8 (function)
--              IsMovementImpaired              	= function: 0x189bcba0 (function)
--              HasItemInInventory              	= function: 0x189bcc58 (function)
--              FindItemInInventory             	= function: 0x189bcd10 (function)
--              HasScepter                      	= function: 0x189bcdc8 (function)
--              SetStolenScepter                	= function: 0x189bce78 (function)
--              GetAttackCapability             	= function: 0x189bcf30 (function)
--              SetAttackCapability             	= function: 0x189bcfe8 (function)
--              SetMoveCapability               	= function: 0x189bd0a0 (function)
--              HasGroundMovementCapability     	= function: 0x189bd158 (function)
--              HasFlyMovementCapability        	= function: 0x189bd218 (function)
--              HasMovementCapability           	= function: 0x189bd2d8 (function)
--              IsNull                          	= function: 0x18934188 (function)
--              ScriptPlayScene                 	= function: 0x18934240 (function)
--              GetCurrentScene                 	= function: 0x18934358 (function)
--              GetSceneByIndex                 	= function: 0x189a6df0 (function)
--              FDesc                           	= table: 0x189341f8 (table)
--              {
--                 GetSceneByIndex                 	= handle GetSceneByIndex(int index)
--  Returns the instance of the scene entity at the specified index. (userdata)
--                 ScriptPlayScene                 	= float ScriptPlayScene(string pszScene, float flDelay)
--  ( vcd file, delay ) - play specified vcd file (userdata)
--                 GetCurrentScene                 	= handle GetCurrentScene()
--  Returns the instance of the oldest active scene entity (if any). (userdata)
--              }
--              SetPoseParameter                	= function: 0x189a5f50 (function)
--              StopAnimation                   	= function: 0x189a6070 (function)
--              SetCycle                        	= function: 0x189a6120 (function)
--              GetCycle                        	= function: 0x189a62c0 (function)
--              IsSequenceFinished              	= function: 0x189a6340 (function)
--              GetSequence                     	= function: 0x189a6258 (function)
--              SetSequence                     	= function: 0x189a6530 (function)
--              IsNull                          	= function: 0x189a5e98 (function)
--              ActiveSequenceDuration          	= function: 0x189a6768 (function)
--              SequenceDuration                	= function: 0x189a63f8 (function)
--              FDesc                           	= table: 0x189a5f08 (table)
--              {
--                 SetPoseParameter                	= float SetPoseParameter(string szName, float fValue)
--  Set the specified pose parameter to the specified value. (userdata)
--                 StopAnimation                   	= void StopAnimation()
--  Stop the current animation by setting playback rate to 0.0. (userdata)
--                 SetCycle                        	= void SetCycle(float flCycle)
--  Set the cycle of the animation. (userdata)
--                 GetCycle                        	= float GetCycle()
--  Get the cycle of the animation. (userdata)
--                 IsSequenceFinished              	= bool IsSequenceFinished()
--  Ask whether the main sequence is done playing. (userdata)
--                 GetSequence                     	= string GetSequence()
--  Returns the name of the active sequence. (userdata)
--                 SetSequence                     	= void SetSequence(string pSequenceName)
--  Sets the active sequence by name, keeping the current cycle. (userdata)
--                 ResetSequence                   	= void ResetSequence(string pSequenceName)
--  Sets the active sequence by name, resetting the current cycle. (userdata)
--                 ActiveSequenceDuration          	= float ActiveSequenceDuration()
--  Returns the duration in seconds of the active sequence. (userdata)
--                 SequenceDuration                	= float SequenceDuration(string pSequenceName)
--  Returns the duration in seconds of the given sequence name. (userdata)
--              }
--              ResetSequence                   	= function: 0x189a61d0 (function)
--              FDesc                           	= table: 0x189a46b8 (table)
--              {
--                 GetModelScale                   	= float GetModelScale()
--  Get scale of entity's model. (userdata)
--                 SetMaterialGroup                	= void SetMaterialGroup(string pMaterialGroup)
--  SetMaterialGroup( string ): Set the material group of this entity. (userdata)
--                 SetModelScale                   	= void SetModelScale(float flScale)
--  Set scale of entity's model. (userdata)
--                 ScriptLookupAttachment          	= int ScriptLookupAttachment(string pAttachmentName)
--  Get the named attachment id. (userdata)
--                 GetAttachmentOrigin             	= Vector GetAttachmentOrigin(int iAttachment)
--  Get the attachment id's origin vector. (userdata)
--                 GetAttachmentAngles             	= Vector GetAttachmentAngles(int iAttachment)
--  Get the attachment id's angles as a p,y,r vector. (userdata)
--                 GetAttachmentForward            	= Vector GetAttachmentForward(int iAttachment)
--  Get the attachment id's forward vector. (userdata)
--                 SetSize                         	= void SetSize(Vector mins, Vector maxs)
--   (userdata)
--                 SetModel                        	= void SetModel(string pModelName)
--   (userdata)
--                 GetRenderAlpha                  	= int GetRenderAlpha()
--  GetRenderAlpha(): Get the alpha modulation of this entity. (userdata)
--                 SetRenderAlpha                  	= void SetRenderAlpha(int nAlpha)
--  SetRenderAlpha( int ): Set the alpha modulation of this entity. (userdata)
--                 SetLightGroup                   	= void SetLightGroup(string pLightGroup)
--  SetLightGroup( string ): Sets the light group of the entity. (userdata)
--                 SetRenderMode                   	= void SetRenderMode(int nMode)
--  SetRenderMode( int ): Sets the render mode of the entity. (userdata)
--                 SetRenderColor                  	= void SetRenderColor(int r, int g, int b)
--  SetRenderColor( r, g, b ): Sets the render color of the entity. (userdata)
--                 GetRenderColor                  	= Vector GetRenderColor()
--  GetRenderColor(): Get the render color of the entity. (userdata)
--                 SetMaterialGroupHash            	= void SetMaterialGroupHash(unsigned nHash)
--  SetMaterialGroupHash( uint32 ): Set the material group hash of this entity. (userdata)
--                 GetMaterialGroupHash            	= unsigned GetMaterialGroupHash()
--  GetMaterialGroupHash(): Get the material group hash of this entity. (userdata)
--                 SetSingleMeshGroup              	= void SetSingleMeshGroup(string pMeshGroupName)
--  SetSingleMeshGroup( string ): Set a single mesh group for this entity. (userdata)
--                 SetMaterialGroupMask            	= void SetMaterialGroupMask(uint64 nMeshGroupMask)
--  SetMaterialGroupMask( uint64 ): Set the mesh group mask of this entity. (userdata)
--                 GetMaterialGroupMask            	= uint64 GetMaterialGroupMask()
--  GetMaterialGroupMask(): Get the mesh group mask of this entity. (userdata)
--                 SetBodygroup                    	= void SetBodygroup(int iGroup, int iValue)
--  Sets a bodygroup. (userdata)
--                 SetBodygroupByName              	= void SetBodygroupByName(string pName, int iValue)
--  Sets a bodygroup by name. (userdata)
--                 SetSkin                         	= void SetSkin(int iSkin)
--  Set skin (int). (userdata)
--              }
--              SetMaterialGroup                	= function: 0x189a53e8 (function)
--              SetMaterialGroupHash            	= function: 0x189a4d68 (function)
--              GetModelScale                   	= function: 0x189a4700 (function)
--              SetModelScale                   	= function: 0x189a4818 (function)
--              ScriptLookupAttachment          	= function: 0x189a48c8 (function)
--              GetAttachmentOrigin             	= function: 0x189a4a70 (function)
--              GetAttachmentAngles             	= function: 0x189a4af0 (function)
--              GetAttachmentForward            	= function: 0x189a4a08 (function)
--              SetSize                         	= function: 0x189a4ce8 (function)
--              SetModel                        	= function: 0x189a4980 (function)
--              GetRenderAlpha                  	= function: 0x189a4ef0 (function)
--              SetRenderAlpha                  	= function: 0x189a4ba8 (function)
--              SetLightGroup                   	= function: 0x189a5128 (function)
--              SetRenderMode                   	= function: 0x189a51d8 (function)
--              SetRenderColor                  	= function: 0x189a5288 (function)
--              GetRenderColor                  	= function: 0x189a5338 (function)
--              IsNull                          	= function: 0x189a4648 (function)
--              GetMaterialGroupHash            	= function: 0x189a4e20 (function)
--              SetSingleMeshGroup              	= function: 0x189a4fa0 (function)
--              SetMaterialGroupMask            	= function: 0x189a5058 (function)
--              GetMaterialGroupMask            	= function: 0x189a5a78 (function)
--              SetBodygroup                    	= function: 0x189a5b30 (function)
--              SetBodygroupByName              	= function: 0x189a5be0 (function)
--              SetSkin                         	= function: 0x189a5c98 (function)
--              SetOrigin                       	= function: 0x189403b8 (function)
--              SetLocalAngles                  	= function: 0x18940468 (function)
--              GetLocalAngles                  	= function: 0x18940518 (function)
--              SetLocalOrigin                  	= function: 0x189405c8 (function)
--              GetLocalOrigin                  	= function: 0x18940678 (function)
--              TransformPointEntityToWorld     	= function: 0x18940728 (function)
--              TransformPointWorldToEntity     	= function: 0x189407e8 (function)
--              SetForwardVector                	= function: 0x189408a8 (function)
--              GetBoundingMins                 	= function: 0x18940960 (function)
--              GetBoundingMaxs                 	= function: 0x18940a10 (function)
--              GetBounds                       	= function: 0x18940ac0 (function)
--              GetAngularVelocity              	= function: 0x18940b70 (function)
--              SetAngularVelocity              	= function: 0x1893fda8 (function)
--              AddEffects                      	= function: 0x1893fe60 (function)
--              RemoveEffects                   	= function: 0x1893ff10 (function)
--              Attribute_SetFloatValue         	= function: 0x1893ffc0 (function)
--              Attribute_GetFloatValue         	= function: 0x189400f0 (function)
--              Attribute_SetIntValue           	= function: 0x18940170 (function)
--              Attribute_GetIntValue           	= function: 0x18940228 (function)
--              HasAttribute                    	= function: 0x189402e0 (function)
--              DeleteAttribute                 	= function: 0x189417f8 (function)
--              ValidatePrivateScriptScope      	= function: 0x189418a8 (function)
--              GetOwner                        	= function: 0x18941968 (function)
--              SetOwner                        	= function: 0x18941a18 (function)
--              SetEntityName                   	= function: 0x18941ac8 (function)
--              GetMass                         	= function: 0x18941b78 (function)
--              SetMass                         	= function: 0x18941bf8 (function)
--              GetSpawnGroupHandle             	= function: 0x18941c78 (function)
--              GetAbsOrigin                    	= function: 0x18941d30 (function)
--              GetAngles                       	= function: 0x18941de0 (function)
--              GetAbsScale                     	= function: 0x18941e90 (function)
--              SetAbsScale                     	= function: 0x18941f40 (function)
--              GetLocalScale                   	= function: 0x18941ff0 (function)
--              SetLocalScale                   	= function: 0x189420a0 (function)
--              SetAbsOrigin                    	= function: 0x18942150 (function)
--              GetCenter                       	= function: 0x18942200 (function)
--              GetTeamNumber                   	= function: 0x189422b0 (function)
--              GetTeam                         	= function: 0x18942360 (function)
--              SetTeam                         	= function: 0x189423e0 (function)
--              FollowEntity                    	= function: 0x18942460 (function)
--              FollowEntityMerge               	= function: 0x18942510 (function)
--              Trigger                         	= function: 0x189425c8 (function)
--              SetContextThink                 	= function: 0x18942670 (function)
--              FDesc                           	= table: 0x1893efd8 (table, already seen)
--              SetContextNum                   	= function: 0x18940c28 (function)
--              GetContext                      	= function: 0x18940cd8 (function)
--              GatherCriteria                  	= function: 0x18940d88 (function)
--              TakeDamage                      	= function: 0x18940e38 (function)
--              IsAlive                         	= function: 0x18940ee8 (function)
--              IsPlayerPawn                    	= function: 0x18940f90 (function)
--              IsPlayerController              	= function: 0x18941040 (function)
--              IsNPC                           	= function: 0x189410f8 (function)
--              IsDOTANPC                       	= function: 0x189411a0 (function)
--              GetMaxHealth                    	= function: 0x18941250 (function)
--              SetMaxHealth                    	= function: 0x18941300 (function)
--              SetThink                        	= function: 0x18a07e70 (function)
--              StopThink                       	= function: 0x18a07ea0 (function)
--              IsInstance                      	= function: 0x18a07ed0 (function)
--              IsBaseNPC                       	= function: 0x18a37258 (function)
--              IsNull                          	= function: 0x1893ef68 (function)
--              GetOrigin                       	= function: 0x18944820 (function)
--              IsPlayer                        	= function: 0x18944770 (function)
--              PrecacheScriptSound             	= function: 0x189446b8 (function)
--              GetSoundDuration                	= function: 0x18944600 (function)
--              StopSound                       	= function: 0x18944550 (function)
--              EmitSoundParams                 	= function: 0x189444a0 (function)
--              EmitSound                       	= function: 0x189443f0 (function)
--              OverrideFriction                	= function: 0x18944338 (function)
--              GetBaseVelocity                 	= function: 0x18944288 (function)
--              GetLocalAngularVelocity         	= function: 0x189441d0 (function)
--              ApplyLocalAngularVelocityImpulse	= function: 0x18944108 (function)
--              ApplyAbsVelocityImpulse         	= function: 0x18944050 (function)
--              GetVelocity                     	= function: 0x18943fa0 (function)
--              GetLocalVelocity                	= function: 0x18941720 (function)
--              SetVelocity                     	= function: 0x18941670 (function)
--              SetFriction                     	= function: 0x189415c0 (function)
--              SetGravity                      	= function: 0x18941510 (function)
--              GetHealth                       	= function: 0x18941460 (function)
--              SetHealth                       	= function: 0x189413b0 (function)
--              SetContext                      	= function: 0x18942720 (function)
--              Kill                            	= function: 0x1893f020 (function)
--              GetForwardVector                	= function: 0x1893f108 (function)
--              GetRightVector                  	= function: 0x1893f1c0 (function)
--              GetLeftVector                   	= function: 0x1893f360 (function)
--              GetUpVector                     	= function: 0x1893f3e0 (function)
--              GetModelName                    	= function: 0x1893f2f8 (function)
--              GetMoveParent                   	= function: 0x1893f5c8 (function)
--              GetRootMoveParent               	= function: 0x1893f270 (function)
--              FirstMoveChild                  	= function: 0x1893f800 (function)
--              NextMovePeer                    	= function: 0x1893f490 (function)
--              GetOwnerEntity                  	= function: 0x1893fa38 (function)
--              GetChildren                     	= function: 0x1893fae8 (function)
--              SetParent                       	= function: 0x1893fb98 (function)
--              SetConstraint                   	= function: 0x1893fc48 (function)
--              EyePosition                     	= function: 0x1893fcf8 (function)
--              SetAngles                       	= function: 0x1893f678 (function)
--              SetAbsAngles                    	= function: 0x1893f728 (function)
--              GetAnglesAsVector               	= function: 0x1893f8b0 (function)
--              EyeAngles                       	= function: 0x1893f968 (function)
--              RedirectOutput                  	= function: 0x1893e050 (function)
--              DisconnectOutput                	= function: 0x18914378 (function)
--              DisconnectRedirectedOutput      	= function: 0x18914d70 (function)
--              GetEntityIndex                  	= function: 0x1893e240 (function)
--              entindex                        	= function: 0x1893e688 (function)
--              GetClassname                    	= function: 0x1893e788 (function)
--              GetEntityHandle                 	= function: 0x1893e808 (function)
--              Destroy                         	= function: 0x1893e888 (function)
--              GetPublicScriptScope            	= function: 0x1893e378 (function)
--              GetOrCreatePublicScriptScope    	= function: 0x1893e3f8 (function)
--              GetPrivateScriptScope           	= function: 0x1893e500 (function)
--              FDesc                           	= table: 0x1893dd58 (table, already seen)
--              GetOrCreatePrivateScriptScope   	= function: 0x1893e580 (function)
--              IsNull                          	= function: 0x1893dcc0 (function)
--              FireOutput                      	= function: 0x1893ddd8 (function)
--              RemoveSelf                      	= function: 0x1893def0 (function)
--              GetIntAttr                      	= function: 0x1893dfa0 (function)
--              SetIntAttr                      	= function: 0x1893e140 (function)
--              GetName                         	= function: 0x1893e708 (function)
--              GetDebugName                    	= function: 0x1893e0d8 (function)
--              ConnectOutput                   	= function: 0x1893e2f8 (function)
--           }
--           __self                          	= userdata: 0x193b43e0 (userdata)
--           bFirstSpawned                   	= true (boolean)
--           bPlayerInit                     	= true (boolean)
--        }
--        damage_type                     	= 2 (number)
--        ability                         	= table: 0x1940a978 (table, already seen)
--     }
--  }